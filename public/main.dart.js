// Generated by dart2js, the Dart to JavaScript compiler version: 1.13.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    return object.__proto__ && object.__proto__.p === cls.prototype.p;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        if (typeof object == "function")
          return C.JavaScriptFunction_methods;
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }],
      "%": "Blob|CanvasGradient|CanvasPattern|DOMError|File|FileError|MediaKeyError|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      }
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }],
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        return dartClosure == null ? this.super$JavaScriptObject$toString(receiver) : J.toString$0$(dartClosure);
      },
      $isFunction: 1
    },
    JSArray: {
      "^": "Interceptor;",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      forEach$1: function(receiver, f) {
        var t1, end, i;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [H.convertRtiToRuntimeType(receiver.$builtinTypeInfo && receiver.$builtinTypeInfo[0])])._assertCheck$1(f);
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          t1.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        var t1, t2;
        t1 = H.getDynamicRuntimeType();
        t2 = H.buildFunctionType(t1, [H.convertRtiToRuntimeType(receiver.$builtinTypeInfo && receiver.$builtinTypeInfo[0])])._assertCheck$1(f);
        t1 = H.buildFunctionType(t1, [t1]);
        t1._assertCheck$1(t2);
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, t1._assertCheck$1(t2)), [null, null]);
      },
      join$1: function(receiver, separator) {
        var t1, list, i, t2;
        t1 = receiver.length;
        list = new Array(t1);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i) {
          t2 = H.S(receiver[i]);
          if (i >= t1)
            return H.ioore(list, i);
          list[i] = t2;
        }
        return list.join(separator);
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return H.assertSubtypeOfRuntimeType(receiver[index], H.getTypeArgumentByIndex(receiver, 0));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return H.assertSubtypeOfRuntimeType(receiver[0], H.getTypeArgumentByIndex(receiver, 0));
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return H.assertSubtypeOfRuntimeType(receiver[t1 - 1], H.getTypeArgumentByIndex(receiver, 0));
        throw H.wrapException(H.IterableElementError_noElement());
      },
      removeRange$2: function(receiver, start, end) {
        this.checkGrowable$1(receiver, "removeRange");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        receiver.splice(start, end - start);
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, i, t1;
        H.listSuperNativeTypeCheck(iterable, "$isIterable");
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount + $length > iterable.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i) {
            t1 = skipCount + i;
            if (t1 >= iterable.length)
              return H.ioore(iterable, t1);
            receiver[start + i] = H.assertSubtypeOfRuntimeType(iterable[t1], H.getTypeArgumentByIndex(receiver, 0));
          }
        else
          for (i = 0; i < $length; ++i) {
            t1 = skipCount + i;
            if (t1 >= iterable.length)
              return H.ioore(iterable, t1);
            receiver[start + i] = H.assertSubtypeOfRuntimeType(iterable[t1], H.getTypeArgumentByIndex(receiver, 0));
          }
      },
      any$1: function(receiver, test) {
        var t1, end, i;
        t1 = H.buildFunctionType(H.buildInterfaceType(P.bool), [H.convertRtiToRuntimeType(receiver.$builtinTypeInfo && receiver.$builtinTypeInfo[0])])._assertCheck$1(test);
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (H.boolConversionCheck(t1.call$1(receiver[i])))
            return true;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        var t1, t2;
        t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.assertSubtype(receiver, "$isJSArray", [t1], "$asJSArray");
        t2 = receiver.length;
        return H.assertSubtype(H.setRuntimeTypeInfo(new J.ArrayIterator(H.assertSubtype(receiver, "$isJSArray", [t1], "$asJSArray"), t2, 0, H.assertSubtypeOfRuntimeType(null, t1)), [t1]), "$isIterator", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterator");
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return H.assertSubtypeOfRuntimeType(receiver[index], H.getTypeArgumentByIndex(receiver, 0));
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        this.checkMutable$1(receiver, "indexed set");
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    JSUnmodifiableArray: {
      "^": "JSArray;"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
      set$__interceptors$_current: function(_current) {
        this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this.__interceptors$_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.set$__interceptors$_current(null);
          return false;
        }
        this.set$__interceptors$_current(t1[t2]);
        ++this.__interceptors$_index;
        return true;
      },
      $isIterator: 1
    },
    JSNumber: {
      "^": "Interceptor;",
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? H.doubleTypeCheck(Math.ceil(receiver)) : H.doubleTypeCheck(Math.floor(receiver));
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      $and: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver & other) >>> 0;
      },
      $xor: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver ^ other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $is$double: 1,
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      $is$double: 1,
      $isnum: 1
    },
    JSString: {
      "^": "Interceptor;",
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      substring$2: function(receiver, startIndex, endIndex) {
        H.intTypeCheck(endIndex);
        H.checkInt(startIndex);
        if (endIndex == null)
          endIndex = receiver.length;
        H.checkInt(endIndex);
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (C.JSInt_methods.$gt(startIndex, endIndex))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (typeof endIndex !== "number")
          return endIndex.$gt();
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >= receiver.length || false)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $isString: 1
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = H.interceptedTypeCheck(isolate, "$is_IsolateContext").eval$1(H.interceptedTypeCheck($function, "$isFunction"));
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    leaveJsAsync: function() {
      --init.globalState.topEventLoop._activeJsAsyncCount;
      H.assertHelper(init.globalState.topEventLoop._activeJsAsyncCount >= 0);
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, rootContext;
      t1 = {};
      t1._captured_args_0 = args;
      if (args == null) {
        args = [];
        t1._captured_args_0 = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      H.interceptedTypeCheck(entry, "$isFunction");
      init.globalState = new H._Manager(0, 0, 1, null, null, null, null, null, null, H.assertSubtype(null, "$isMap", [P.$int, H._IsolateContext], "$asMap"), null, H.assertSubtype(null, "$isMap", [P.$int, null], "$asMap"), entry);
      t2 = init.globalState;
      t3 = self.window == null;
      t4 = self.Worker;
      t5 = t3 && !!self.postMessage;
      t2.isWorker = t5;
      t5 = !t5;
      if (t5)
        t4 = t4 != null && $.$get$IsolateNatives_thisScript() != null;
      else
        t4 = true;
      t2.supportsWorkers = t4;
      t2.fromCommandLine = t3 && t5;
      t2.topEventLoop = new H._EventLoop(H.assertSubtype(H.assertSubtype(P.ListQueue$(null, H._IsolateEvent), "$isQueue", [H._IsolateEvent], "$asQueue"), "$isQueue", [H._IsolateEvent], "$asQueue"), 0);
      t4 = P.$int;
      t5 = H._IsolateContext;
      t3 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [t4, t5]);
      t2.set$isolates(H.assertSubtype(t3, "$isJsLinkedHashMap", [t4, t5], "$asJsLinkedHashMap"));
      t5 = P.$int;
      t3 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [t5, null]);
      t2.set$managers(H.assertSubtype(t3, "$isJsLinkedHashMap", [t5, null], "$asJsLinkedHashMap"));
      if (H.boolConversionCheck(t2.isWorker)) {
        t3 = new H._MainManagerStub();
        t2.mainManager = t3;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t3);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
      if (H.boolConversionCheck(init.globalState.isWorker))
        return;
      t2 = init.globalState.nextIsolateId++;
      t3 = P.$int;
      t4 = H.RawReceivePortImpl;
      t5 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [t3, t4]);
      H.assertSubtype(t5, "$isJsLinkedHashMap", [t3, t4], "$asJsLinkedHashMap");
      t4 = H.assertSubtype(P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int), "$isSet", [P.$int], "$asSet");
      t3 = init.createNewIsolate();
      t6 = new H.RawReceivePortImpl(0, null, false);
      t7 = H.random64();
      t8 = H.random64();
      t9 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t10 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      H.assertSubtype(t5, "$isMap", [P.$int, H.RawReceivePortImpl], "$asMap");
      H.assertSubtype(t4, "$isSet", [P.$int], "$asSet");
      rootContext = new H._IsolateContext(t2, t5, t4, t3, t6, new H.CapabilityImpl(t7), new H.CapabilityImpl(t8), false, false, H.assertSubtype([], "$isList", [H._IsolateEvent], "$asList"), H.assertSubtype(t9, "$isSet", [P.Capability], "$asSet"), null, null, false, true, H.assertSubtype(t10, "$isSet", [P.SendPort], "$asSet"));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t6);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0();
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (H.boolConversionCheck(init.globalState.isWorker))
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + H.S(stack) + "\""));
    },
    IsolateNatives__processWorkerMessage: function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, t5, t6, t7, t8, t9, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = H.intTypeCheck(t1.$index(msg, "id"));
          functionName = H.stringTypeCheck(t1.$index(msg, "functionName"));
          entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = P.$int;
          t3 = H.RawReceivePortImpl;
          t4 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [t2, t3]);
          H.assertSubtype(t4, "$isJsLinkedHashMap", [t2, t3], "$asJsLinkedHashMap");
          t3 = H.assertSubtype(P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int), "$isSet", [P.$int], "$asSet");
          t2 = init.createNewIsolate();
          t5 = new H.RawReceivePortImpl(0, null, false);
          t6 = H.random64();
          t7 = H.random64();
          t8 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          t9 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          H.assertSubtype(t4, "$isMap", [P.$int, H.RawReceivePortImpl], "$asMap");
          H.assertSubtype(t3, "$isSet", [P.$int], "$asSet");
          context = new H._IsolateContext(t1, t4, t3, t2, t5, new H.CapabilityImpl(t6), new H.CapabilityImpl(t7), false, false, H.assertSubtype([], "$isList", [H._IsolateEvent], "$asList"), H.assertSubtype(t8, "$isSet", [P.Capability], "$asSet"), null, null, false, true, H.assertSubtype(t9, "$isSet", [P.SendPort], "$asSet"));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t5);
          t5 = init.globalState.topEventLoop.events;
          t3 = new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start");
          H.assertSubtypeOfRuntimeType(t3, H.getTypeArgumentByIndex(t5, 0));
          t5._add$1(t3);
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (H.interceptedTypeCheck(t1.$index(msg, "port"), "$isSendPort") != null)
            t1.$index(msg, "port").send$1(t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (H.boolConversionCheck(init.globalState.isWorker)) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, H.assertSubtype(H.assertSubtype(P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    },
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (H.boolConversionCheck(init.globalState.isWorker)) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, H.assertSubtype(H.assertSubtype(P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      H.assertSubtype(args, "$isList", [P.String], "$asList");
      H.boolTypeCheck(isSpawnUri);
      H.boolTypeCheck(startPaused);
      H.interceptedTypeCheck(replyTo, "$isSendPort");
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      replyTo.send$1(["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (H.boolConversionCheck(startPaused)) {
        context.addPause$2(t3, t3);
        t1 = init.globalState.topEventLoop.events;
        t2 = new H._IsolateEvent(context, t2, "start isolate");
        H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
        t1._add$1(t2);
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, H.assertSubtype(H.assertSubtype(P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:0;__isolate_helper$_box_0,_captured_entry_1",
      call$0: function() {
        this._captured_entry_1.call$1(this.__isolate_helper$_box_0._captured_args_0);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:0;__isolate_helper$_box_0,_captured_entry_2",
      call$0: function() {
        this._captured_entry_2.call$2(this.__isolate_helper$_box_0._captured_args_0, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      set$isolates: function(isolates) {
        this.isolates = H.assertSubtype(isolates, "$isMap", [P.$int, H._IsolateContext], "$asMap");
      },
      set$managers: function(managers) {
        this.managers = H.assertSubtype(managers, "$isMap", [P.$int, null], "$asMap");
      },
      static: {_Manager__serializePrintMessage: function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, H.assertSubtype(H.assertSubtype(P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(t1);
        }}
    },
    _IsolateContext: {
      "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized,isPaused,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        H.interceptedTypeCheck(authentification, "$isCapability");
        H.interceptedTypeCheck(resume, "$isCapability");
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, t2, $event, t3, t4, t5;
        H.interceptedTypeCheck(resume, "$isCapability");
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
            if (0 >= t2)
              return H.ioore(t1, -1);
            $event = t1.pop();
            t2 = init.globalState.topEventLoop.events;
            H.assertSubtypeOfRuntimeType($event, H.getTypeArgumentByIndex(t2, 0));
            t3 = t2._head;
            t4 = t2._table;
            t5 = t4.length;
            t3 = (t3 - 1 & t5 - 1) >>> 0;
            t2._head = t3;
            if (t3 < 0 || t3 >= t5)
              return H.ioore(t4, t3);
            t4[t3] = $event;
            if (t3 === t2._tail)
              t2._grow$0();
            ++t2._modificationCount;
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        H.interceptedTypeCheck(responsePort, "$isSendPort");
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 1;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = response;
            return;
          }
        (t2 && C.JSArray_methods).add$1(t2, responsePort);
        t1 = this.doneHandlers;
        (t1 && C.JSArray_methods).add$1(t1, response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        H.interceptedTypeCheck(responsePort, "$isSendPort");
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        H.interceptedTypeCheck(authentification, "$isCapability");
        H.boolTypeCheck(errorsAreFatal);
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1, t2;
        H.interceptedTypeCheck(responsePort, "$isSendPort");
        H.intTypeCheck(pingType);
        if (pingType !== 0)
          t1 = pingType === 1 && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          responsePort.send$1(response);
          return;
        }
        t1 = new H._IsolateContext_handlePing_respond(responsePort, response);
        H.assertHelper(pingType === 1);
        t2 = this._scheduledControlEvents;
        if (t2 == null) {
          t2 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t2;
        }
        t2.toString;
        H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
        t2._add$1(t1);
      },
      handleKill$2: function(authentification, priority) {
        var t1, t2;
        H.interceptedTypeCheck(authentification, "$isCapability");
        H.intTypeCheck(priority);
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        if (priority !== 0)
          t1 = priority === 1 && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        H.assertHelper(priority === 1);
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t2 = this.get$kill();
        t1.toString;
        H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
        t1._add$1(t2);
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message, t2;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (H.boolConversionCheck(this.errorsAreFatal) && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = new Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : stackTrace.toString$0(0);
        for (t2 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), [null]), t2._cell = t2._set._collection$_first, H.assertSubtype(t2, "$isIterator", [H.getTypeArgumentByIndex(t1, 0)], "$asIterator"); t2.moveNext$0();)
          H.interceptedTypeCheck(H.assertSubtypeOfRuntimeType(t2._collection$_current, H.getTypeArgumentByIndex(t2, 0)), "$isSendPort").send$1(message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        H.interceptedTypeCheck(code, "$isFunction");
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (H.boolConversionCheck(this.errorsAreFatal)) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = H.boolTypeCheck(oldIsExecutingEvent);
          init.globalState.currentContext = H.interceptedTypeCheck(old, "$is_IsolateContext");
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      lookup$1: function(portId) {
        return H.interceptedTypeCheck(this.ports.$index(0, portId), "$isRawReceivePortImpl");
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i, responsePort, t3;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current()._close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, t2 = t1.length, i < t2; i += 2) {
            responsePort = H.interceptedTypeCheck(t1[i], "$isSendPort");
            t3 = i + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            responsePort.send$1(t1[t3]);
          }
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 2]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:2;_captured_responsePort_0,_captured_response_1",
      call$0: function() {
        this._captured_responsePort_0.send$1(this._captured_response_1);
      }
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return H.interceptedTypeCheck(t1.removeFirst$0(), "$is_IsolateEvent");
      },
      runIteration$0: function() {
        var $event, t1, t2, t3;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(init.globalState.rootContext.id))
              if (H.boolConversionCheck(init.globalState.fromCommandLine)) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (H.boolConversionCheck(t1.isWorker)) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t3 = H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [null, P.$int]);
            t2 = new H._Serializer(true, H.assertSubtype(H.assertSubtype(H.assertSubtype(t3, "$is_LinkedIdentityHashMap", [null, P.$int], "$as_LinkedIdentityHashMap"), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function() {
        var e, trace, exception, t1, t2;
        if (!H.boolConversionCheck(init.globalState.isWorker))
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, H.assertSubtype(H.assertSubtype(P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:2;__isolate_helper$_captured_this_0",
      call$0: function() {
        if (!this.__isolate_helper$_captured_this_0.runIteration$0())
          return;
        H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(this);
        P.Timer_Timer(C.Duration_0, this);
      }
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.isPaused) {
          C.JSArray_methods.add$1(t1.delayedEvents, this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:0;_captured_entryPoint_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_startPaused_4,_captured_replyTo_5",
      call$0: function() {
        H.IsolateNatives__startIsolate(this._captured_entryPoint_0, this._captured_args_1, this._captured_message_2, this._captured_isSpawnUri_3, this._captured_startPaused_4, this._captured_replyTo_5);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:2;_captured_topLevel_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_context_4",
      call$0: function() {
        var t1, t2, t3, t4;
        t1 = this._captured_context_4;
        t1.initialized = true;
        if (!H.boolConversionCheck(this._captured_isSpawnUri_3))
          this._captured_topLevel_0.call$1(this._captured_message_2);
        else {
          t2 = this._captured_topLevel_0;
          t3 = H.getDynamicRuntimeType();
          t4 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
          if (t4)
            t2.call$2(this._captured_args_1, this._captured_message_2);
          else {
            t3 = H.buildFunctionType(t3, [t3])._isTest$1(t2);
            if (t3)
              t2.call$1(this._captured_args_1);
            else
              t2.call$0();
          }
        }
        t1._updateGlobalState$0();
      }
    },
    _BaseSendPort: {
      "^": "Object;",
      $isSendPort: 1,
      $isCapability: 1
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(message) {
        var isolate, t1, msg, t2;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1._isClosed)
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          t1 = J.getInterceptor$asx(msg);
          switch (t1.$index(msg, 0)) {
            case "pause":
              isolate.addPause$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "resume":
              isolate.removePause$1(t1.$index(msg, 1));
              break;
            case "add-ondone":
              isolate.addDoneListener$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "remove-ondone":
              isolate.removeDoneListener$1(t1.$index(msg, 1));
              break;
            case "set-errors-fatal":
              isolate.setErrorsFatal$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "ping":
              isolate.handlePing$3(t1.$index(msg, 1), t1.$index(msg, 2), t1.$index(msg, 3));
              break;
            case "kill":
              isolate.handleKill$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "getErrors":
              t1 = H.interceptedTypeCheck(t1.$index(msg, 1), "$isSendPort");
              isolate.errorPorts.add$1(0, t1);
              break;
            case "stopErrors":
              t1 = H.interceptedTypeCheck(t1.$index(msg, 1), "$isSendPort");
              isolate.errorPorts.remove$1(0, t1);
              break;
          }
          return;
        }
        t1 = init.globalState.topEventLoop;
        t2 = "receive " + H.S(message);
        t1 = t1.events;
        t2 = new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2);
        H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
        t1._add$1(t2);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._NativeJsSendPort && this._receivePort === other._receivePort;
      },
      get$hashCode: function(_) {
        return this._receivePort._id;
      },
      $isSendPort: 1,
      $isCapability: 1
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:0;__isolate_helper$_captured_this_0,_captured_msg_1",
      call$0: function() {
        var t1 = this.__isolate_helper$_captured_this_0._receivePort;
        if (!t1._isClosed)
          t1.__isolate_helper$_add$1(this._captured_msg_1);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, H.assertSubtype(H.assertSubtype(P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int), "$isMap", [null, P.$int], "$asMap"), "$isMap", [null, P.$int], "$asMap")).serialize$1(t1);
        if (H.boolConversionCheck(init.globalState.isWorker)) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H._WorkerSendPort) {
          t1 = this._workerId;
          t2 = other._workerId;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this._isolateId;
            t2 = other._isolateId;
            if (t1 == null ? t2 == null : t1 === t2) {
              t1 = this._receivePortId;
              t2 = other._receivePortId;
              t2 = t1 == null ? t2 == null : t1 === t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = this._workerId;
        if (typeof t1 !== "number")
          return t1.$shl();
        t2 = this._isolateId;
        if (typeof t2 !== "number")
          return t2.$shl();
        return C.JSInt_methods.$xor((t1 << 16 ^ t2 << 8) >>> 0, this._receivePortId);
      },
      $isSendPort: 1,
      $isCapability: 1
    },
    RawReceivePortImpl: {
      "^": "Object;_id,_handler,_isClosed",
      _close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      __isolate_helper$_add$1: function(dataEvent) {
        if (this._isClosed)
          return;
        this._handler$1(dataEvent);
      },
      _handler$1: function(arg0) {
        return this._handler.call$1(arg0);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2, t3;
        t1 = H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback);
        if (milliseconds === 0)
          t2 = self.setTimeout == null || H.boolConversionCheck(init.globalState.isWorker);
        else
          t2 = false;
        if (t2) {
          this._handle = 1;
          t2 = init.globalState.topEventLoop;
          t3 = init.globalState.currentContext;
          t2 = t2.events;
          t1 = new H._IsolateEvent(t3, new H.TimerImpl_internalCallback(this, t1), "timer");
          H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
          t2._add$1(t1);
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, t1), 0), milliseconds);
        } else {
          H.assertHelper(milliseconds > 0);
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
        }
      },
      $isTimer: 1,
      static: {TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback));
          return t1;
        }}
    },
    TimerImpl_internalCallback: {
      "^": "Closure:2;__isolate_helper$_captured_this_0,_captured_callback_1",
      call$0: function() {
        this.__isolate_helper$_captured_this_0._handle = null;
        this._captured_callback_1.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:2;_captured_this_2,_captured_callback_3",
      call$0: function() {
        this._captured_this_2._handle = null;
        H.leaveJsAsync();
        this._captured_callback_3.call$0();
      }
    },
    CapabilityImpl: {
      "^": "Object;_id",
      get$hashCode: function(_) {
        var hash = this._id;
        if (typeof hash !== "number")
          return hash.$shr();
        hash = C.JSInt_methods._shrOtherPositive$1(hash, 0) ^ C.JSInt_methods._tdivFast$1(hash, 4294967296);
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this._id;
          t2 = other._id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      },
      $isCapability: 1
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, t3, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = H.intTypeCheck(t1.$index(0, x));
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          H.interceptedTypeCheck(x, "$isMap");
          serializeTearOff = this.get$serialize();
          t2 = x.get$keys();
          t3 = H.getDynamicRuntimeType();
          H.buildFunctionType(t3, [t2.E0()])._assertCheck$1(serializeTearOff);
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = H.assertSubtype(P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0)), "$isList", [H.getRuntimeTypeArgument(t2, "Iterable", 0)], "$asList");
          t1 = t1.get$values(x);
          H.buildFunctionType(t3, [t1.E0()])._assertCheck$1(serializeTearOff);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, H.assertSubtype(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), "$isList", [H.getRuntimeTypeArgument(t1, "Iterable", 0)], "$asList")];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$static_name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x._id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 1],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized;
        H.assertHelper(typeof indexable !== "string");
        serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i, t1;
        H.listTypeCheck(x);
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i) {
          t1 = this.serialize$1(x[i]);
          if (i >= serialized.length)
            return H.ioore(serialized, i);
          serialized[i] = t1;
        }
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i, t1;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i) {
          t1 = this.serialize$1(x[keys[i]]);
          if (i >= values.length)
            return H.ioore(values, i);
          values[i] = t1;
        }
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort._id];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var result, t1, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "ref"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            return C.JSArray_methods.$index(this.deserializedObjects, H.intTypeCheck(x[1]));
          case "buffer":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "buffer"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.interceptedTypeCheck(x[1], "$isNativeByteBuffer");
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            return result;
          case "typed":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "typed"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.interceptedTypeCheck(x[1], "$isNativeTypedData");
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            return result;
          case "fixed":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "fixed"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.listTypeCheck(x[1]);
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "extendable"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.listTypeCheck(x[1]);
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            return H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
          case "mutable":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "mutable"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.listTypeCheck(x[1]);
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "const"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.listTypeCheck(x[1]);
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "raw sendport"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = H.interceptedTypeCheck(x[1], "$isSendPort");
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "function"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = init.globalFunctions[H.stringTypeCheck(x[1])]();
            C.JSArray_methods.add$1(this.deserializedObjects, result);
            return result;
          case "capability":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "capability"));
            if (1 >= x.length)
              return H.ioore(x, 1);
            return new H.CapabilityImpl(H.intTypeCheck(x[1]));
          case "dart":
            if (0 >= x.length)
              return H.ioore(x, 0);
            H.assertHelper(J.$eq$(x[0], "dart"));
            t1 = x.length;
            if (1 >= t1)
              return H.ioore(x, 1);
            classId = H.stringTypeCheck(x[1]);
            if (2 >= t1)
              return H.ioore(x, 2);
            fields = H.listTypeCheck(x[2]);
            emptyInstance = init.instanceFromClassId(classId);
            C.JSArray_methods.add$1(this.deserializedObjects, emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 1],
      deserializeArrayInPlace$1: function(x) {
        var i;
        H.listTypeCheck(x);
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.deserialize$1(x[i]));
        return x;
      },
      deserializeMap$1: function(x) {
        var t1, keys, values, result, i;
        if (0 >= x.length)
          return H.ioore(x, 0);
        H.assertHelper(J.$eq$(x[0], "map"));
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = H.listTypeCheck(x[1]);
        if (2 >= t1)
          return H.ioore(x, 2);
        values = H.listTypeCheck(x[2]);
        result = P.LinkedHashMap__makeEmpty();
        C.JSArray_methods.add$1(this.deserializedObjects, result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(values), i = 0; i < keys.length; ++i)
          result.$indexSet(0, keys[i], this.deserialize$1(t1.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
        if (0 >= x.length)
          return H.ioore(x, 0);
        H.assertHelper(J.$eq$(x[0], "sendport"));
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        managerId = H.intTypeCheck(x[1]);
        if (2 >= t1)
          return H.ioore(x, 2);
        isolateId = H.intTypeCheck(x[2]);
        if (3 >= t1)
          return H.ioore(x, 3);
        receivePortId = H.intTypeCheck(x[3]);
        t1 = init.globalState.currentManagerId;
        if (managerId == null ? t1 == null : managerId === t1) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(H.interceptedTypeCheck(receivePort, "$isRawReceivePortImpl"), isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        C.JSArray_methods.add$1(this.deserializedObjects, result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var t1, keys, values, o, t2, i;
        if (0 >= x.length)
          return H.ioore(x, 0);
        H.assertHelper(J.$eq$(x[0], "js-object"));
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = H.listTypeCheck(x[1]);
        if (2 >= t1)
          return H.ioore(x, 2);
        values = H.listTypeCheck(x[2]);
        o = {};
        C.JSArray_methods.add$1(this.deserializedObjects, o);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          o[keys[i]] = this.deserialize$1(t2.$index(values, i));
        }
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    jsConstructorNameToRti: function(constructorName) {
      return init.getTypeFromName(constructorName);
    },
    getType: function(index) {
      return init.types[index];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, decompiledName, t1;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_8ZY(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            decompiledName = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/)[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = H.stringTypeCheck(decompiledName);
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1)
        t1 = $name.charCodeAt(0) === 36;
      else
        t1 = false;
      if (t1)
        $name = C.JSString_methods.substring$1($name, 1);
      return ($name + H.joinArguments(H.listTypeCheck(H.getRuntimeTypeInfo(object)), 0, null)).replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (index < 0 || C.JSInt_methods.$ge(index, $length))
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkInt: function(value) {
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2) {
              H.stringTypeCheck(message);
              return t1.call$1(new H.NullError(message, H.stringTypeCheck(match == null ? null : match.method)));
            }
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(H.stringTypeCheck(typeof message === "string" ? message : "")));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var t1, $length, index, index0, key;
      t1 = typeof keyValuePairs === "object" && keyValuePairs !== null && keyValuePairs.constructor === Array;
      H.assertHelper(t1);
      $length = keyValuePairs.length;
      for (index = 0; index < $length;) {
        index0 = index + 1;
        H.assertHelper(t1);
        key = keyValuePairs[index];
        index = index0 + 1;
        H.assertHelper(t1);
        result.$indexSet(0, key, keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      H.intTypeCheck(numberOfArguments);
      if (numberOfArguments === 0)
        return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
      else if (numberOfArguments === 1)
        return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
      else if (numberOfArguments === 2)
        return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
      else if (numberOfArguments === 3)
        return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
      else if (numberOfArguments === 4)
        return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      else
        throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d", "this.$initialize(a,b,c,d);" + t1);
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(t) {
          return function() {
            return H.getType(t);
          };
        }(functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      H.assertHelper(1 <= arity && arity < 27);
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      return new Function(t2 + t1 + "}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      H.assertHelper(1 < arity && arity < 28);
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      H.listTypeCheck(functions);
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    boolConversionCheck: function(value) {
      if (typeof value === "boolean")
        return value;
      H.boolTypeCheck(value);
      H.assertHelper(value != null);
      return false;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.stringTypeCheck(property).substring(3)));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (!!J.getInterceptor(value).$isList)
        return value;
      if (J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    voidTypeCheck: function(value) {
      if (value == null)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "void"));
    },
    assertTest: function(condition) {
      if (true === condition)
        return false;
      if (!!J.getInterceptor(condition).$isFunction)
        condition = condition.call$0();
      if (typeof condition === "boolean")
        return !condition;
      throw H.wrapException(H.TypeErrorImplementation$(condition, "bool"));
    },
    assertHelper: function(condition) {
      if (H.assertTest(condition))
        throw H.wrapException(new P.AssertionError());
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(H.stringTypeCheck(staticName))));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
      H.interceptedTypeCheck(returnType, "$isRuntimeType");
      H.assertSubtype(parameterTypes, "$isList", [H.RuntimeType], "$asList");
      H.assertSubtype(optionalParameterTypes, "$isList", [H.RuntimeType], "$asList");
      return new H.RuntimeFunctionType(returnType, H.assertSubtype(parameterTypes, "$isList", [H.RuntimeType], "$asList"), H.assertSubtype(optionalParameterTypes, "$isList", [H.RuntimeType], "$asList"), null);
    },
    buildInterfaceType: function(rti, typeArguments) {
      var jsConstructorName = rti.builtin$cls;
      if (typeArguments == null || typeArguments.length === 0)
        return new H.RuntimeTypePlain(jsConstructorName);
      H.assertSubtype(typeArguments, "$isList", [H.RuntimeType], "$asList");
      return new H.RuntimeTypeGeneric(jsConstructorName, H.assertSubtype(typeArguments, "$isList", [H.RuntimeType], "$asList"), null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    getVoidRuntimeType: function() {
      return C.C_VoidRuntimeType;
    },
    convertRtiToRuntimeType: function(rti) {
      var list, t1, $name, $arguments, i;
      if (rti == null)
        return C.C_DynamicRuntimeType;
      else if (typeof rti == "function")
        return new H.RuntimeTypePlain(rti.name);
      else if (rti.constructor == Array) {
        list = rti;
        t1 = list.length;
        if (0 >= t1)
          return H.ioore(list, 0);
        $name = list[0].name;
        $arguments = [];
        for (i = 1; i < t1; ++i)
          C.JSArray_methods.add$1($arguments, H.convertRtiToRuntimeType(list[i]));
        H.assertSubtype($arguments, "$isList", [H.RuntimeType], "$asList");
        return new H.RuntimeTypeGeneric($name, H.assertSubtype($arguments, "$isList", [H.RuntimeType], "$asList"), rti);
      } else if ("func" in rti)
        return C.C_DynamicRuntimeType;
      else
        throw H.wrapException(new H.RuntimeError("Cannot convert '" + JSON.stringify(rti) + "' to RuntimeType."));
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    setRuntimeTypeInfo: function(target, rti) {
      H.assertHelper(rti == null || typeof rti === "object" && rti !== null && rti.constructor === Array);
      target.$builtinTypeInfo = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$builtinTypeInfo;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments, t1;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      if ($arguments == null)
        t1 = null;
      else {
        H.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[index];
      }
      return t1;
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti, t1;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      if (rti == null)
        t1 = null;
      else {
        H.assertHelper(typeof rti === "object" && rti !== null && rti.constructor === Array);
        t1 = rti[index];
      }
      return t1;
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      var t1, t2;
      t1 = H.buildFunctionType(H.buildInterfaceType(P.String), [H.buildInterfaceType(P.$int)]);
      t2 = t1._assertCheck$1(onTypeVariable);
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array) {
        t1._assertCheck$1(t2);
        H.assertHelper(true);
        H.assertHelper(true);
        return rti[0].builtin$cls + H.joinArguments(rti, 1, t2);
      } else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        return C.JSInt_methods.toString$0(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var t1, t2, buffer, index, firstArgument, allDynamic, argument;
      t1 = H.buildFunctionType(H.buildInterfaceType(P.String), [H.buildInterfaceType(P.$int)])._assertCheck$1(onTypeVariable);
      if (types == null)
        return "";
      t2 = typeof types === "object" && types !== null && types.constructor === Array;
      H.assertHelper(t2);
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true; H.assertHelper(t2), index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents += ", ";
        H.assertHelper(t2);
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        buffer._contents += H.S(H.runtimeTypeToString(argument, t1));
      }
      return allDynamic ? "" : "<" + H.S(buffer) + ">";
    },
    substitute: function(substitution, $arguments) {
      H.assertHelper(substitution == null || typeof substitution == "function");
      H.assertHelper($arguments == null || typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      if (typeof substitution == "function") {
        substitution = H.invokeOn(substitution, null, $arguments);
        if (substitution == null)
          return substitution;
        if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          return substitution;
        if (typeof substitution == "function")
          return H.invokeOn(substitution, null, $arguments);
      }
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object != null && !H.checkSubtype(object, isField, checks, asField))
        throw H.wrapException(H.TypeErrorImplementation$(object, (isField.substring(3) + H.joinArguments(checks, 0, null)).replace(/[^<,> ]+/g, function(m) {
          return init.mangledGlobalNames[m] || m;
        })));
      return object;
    },
    areSubtypes: function(s, t) {
      var t1, t2, t3, len, i;
      if (s == null || t == null)
        return true;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      H.assertHelper(t1);
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      H.assertHelper(t2);
      H.assertHelper(t1);
      t3 = s.length;
      H.assertHelper(t2);
      H.assertHelper(t3 === t.length);
      H.assertHelper(t1);
      len = s.length;
      for (i = 0; i < len; ++i) {
        H.assertHelper(t1);
        t3 = s[i];
        H.assertHelper(t2);
        if (!H.isSubtype(t3, t[i]))
          return false;
      }
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var rti, type, targetSignatureFunction;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
      if (t == null)
        return true;
      rti = H.getRuntimeTypeInfo(o);
      o = J.getInterceptor(o);
      type = o.constructor;
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      if ('func' in t) {
        targetSignatureFunction = o.$signature;
        if (targetSignatureFunction == null)
          return false;
        return H.isFunctionSubtype(H.invokeOn(targetSignatureFunction, o, null), t);
      }
      return H.isSubtype(type, t);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type, null)));
      return object;
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      if (t1) {
        H.assertHelper(true);
        typeOfS = s[0];
      } else
        typeOfS = s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      if (t2) {
        H.assertHelper(true);
        typeOfT = t[0];
      } else
        typeOfT = t;
      if (typeOfT !== typeOfS) {
        if (!('$is' + H.runtimeTypeToString(typeOfT, null) in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, t2, sLength, tLength, i, t3, t4;
      H.listTypeCheck(s);
      H.listTypeCheck(t);
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      H.assertHelper(t1);
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      H.assertHelper(t2);
      H.assertHelper(t1);
      sLength = s.length;
      H.assertHelper(t2);
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        H.assertHelper(t1);
        t3 = s[i];
        H.assertHelper(t2);
        t4 = t[i];
        if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      H.assertHelper(typeof s == 'object');
      H.assertHelper(typeof t == 'object');
      t1 = H.listTypeCheck(Object.getOwnPropertyNames(t));
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, t1, t2, pos, t3, t4, tPos, sPos;
      H.assertHelper('func' in t);
      if (!('func' in s))
        return false;
      if ("v" in s) {
        if (!("v" in t) && "ret" in t)
          return false;
      } else if (!("v" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      if (sParameterTypes != null) {
        H.assertHelper(typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array);
        sParametersLen = sParameterTypes.length;
      } else
        sParametersLen = 0;
      if (tParameterTypes != null) {
        H.assertHelper(typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array);
        tParametersLen = tParameterTypes.length;
      } else
        tParametersLen = 0;
      if (sOptionalParameterTypes != null) {
        H.assertHelper(typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array);
        sOptionalParametersLen = sOptionalParameterTypes.length;
      } else
        sOptionalParametersLen = 0;
      if (tOptionalParameterTypes != null) {
        H.assertHelper(typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array);
        tOptionalParametersLen = tOptionalParameterTypes.length;
      } else
        tOptionalParametersLen = 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (t1 = typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array, t2 = typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array, pos = 0; pos < sParametersLen; ++pos) {
          H.assertHelper(t1);
          t3 = sParameterTypes[pos];
          H.assertHelper(t2);
          t4 = tParameterTypes[pos];
          if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
            return false;
        }
        for (t1 = typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array, tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          H.assertHelper(t1);
          t3 = sOptionalParameterTypes[sPos];
          H.assertHelper(t2);
          t4 = tParameterTypes[tPos];
          if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
            return false;
        }
        for (t2 = typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array, tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          H.assertHelper(t1);
          t3 = sOptionalParameterTypes[sPos];
          H.assertHelper(t2);
          t4 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    invokeOn: function($function, receiver, $arguments) {
      H.assertHelper(typeof $function == "function");
      H.assertHelper($arguments == null || typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      return $function.apply(receiver, $arguments);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      H.assertHelper(!(obj instanceof P.Object));
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    ConstantMap: {
      "^": "Object;",
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $isMap: 1
    },
    GeneralConstantMap: {
      "^": "ConstantMap;_jsData",
      _getMap$0: function() {
        var backingMap = H.assertSubtype(this.$map, "$isLinkedHashMap", [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)], "$asLinkedHashMap");
        if (backingMap == null) {
          backingMap = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          backingMap.$builtinTypeInfo = this.$builtinTypeInfo;
          H.assertSubtype(backingMap, "$isLinkedHashMap", [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)], "$asLinkedHashMap");
          H.fillLiteralMap(this._jsData, backingMap);
          this.$map = backingMap;
        }
        return H.assertSubtype(backingMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)], "$asMap");
      },
      $index: function(_, key) {
        return H.assertSubtypeOfRuntimeType(this._getMap$0().$index(0, key), H.getTypeArgumentByIndex(this, 1));
      },
      forEach$1: function(_, f) {
        var t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.K0(), this.V0()])._assertCheck$1(f);
        this._getMap$0().forEach$1(0, t1);
      },
      get$length: function(_) {
        var t1 = this._getMap$0();
        return t1.get$length(t1);
      },
      K0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      V0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }}
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
          match = H.assertSubtype(message.match(/\\\$[a-zA-Z]+\\\$/g), "$isList", [P.String], "$asList");
          if (match == null)
            match = H.assertSubtype([], "$isList", [P.String], "$asList");
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }}
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          H.stringTypeCheck(_message);
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }}
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:1;_captured_ex_0",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this._captured_ex_0;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      },
      $isStackTrace: 1
    },
    invokeClosure_closure: {
      "^": "Closure:0;_captured_closure_0",
      call$0: function() {
        return this._captured_closure_0.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:0;_captured_closure_1,_captured_arg1_2",
      call$0: function() {
        return this._captured_closure_1.call$1(this._captured_arg1_2);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:0;_captured_closure_3,_captured_arg1_4,_captured_arg2_5",
      call$0: function() {
        return this._captured_closure_3.call$2(this._captured_arg1_4, this._captured_arg2_5);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:0;_captured_closure_6,_captured_arg1_7,_captured_arg2_8,_captured_arg3_9",
      call$0: function() {
        return this._captured_closure_6.call$3(this._captured_arg1_7, this._captured_arg2_8, this._captured_arg3_9);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:0;_captured_closure_10,_captured_arg1_11,_captured_arg2_12,_captured_arg3_13,_captured_arg4_14",
      call$0: function() {
        return this._captured_closure_10.call$4(this._captured_arg1_11, this._captured_arg2_12, this._captured_arg3_13, this._captured_arg4_14);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,__js_helper$_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {BoundClosure_selfOf: function(closure) {
          return closure._self;
        }, BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        }, BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        }, BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = H.listTypeCheck(Object.getOwnPropertyNames(template));
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }}
    },
    TypeErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("type '" + H.Primitives_objectTypeName(value) + "' is not a subtype of type '" + H.S(type) + "'");
        }}
    },
    CastErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }}
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _assertCheck$1: function(expression) {
        var t1;
        if ($.RuntimeFunctionType_inAssert)
          return;
        $.RuntimeFunctionType_inAssert = true;
        try {
          t1 = this._check$2(expression, false);
          return t1;
        } finally {
          $.RuntimeFunctionType_inAssert = false;
        }
      },
      _check$2: function(expression, isCast) {
        var $self, functionTypeObject;
        if (expression == null)
          return;
        if (this._isTest$1(expression))
          return expression;
        $self = new H.FunctionTypeInfoDecoderRing(this.toRti$0(), null).toString$0(0);
        if (isCast) {
          functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
          throw H.wrapException(H.CastErrorImplementation$(functionTypeObject != null ? new H.FunctionTypeInfoDecoderRing(functionTypeObject, null).toString$0(0) : H.Primitives_objectTypeName(expression), $self));
        } else
          throw H.wrapException(H.TypeErrorImplementation$(expression, $self));
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.v = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = H.interceptedTypeCheck(t1[i], "$isRuntimeType");
            if (needsComma)
              result += ", ";
            result += J.toString$0$(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = H.interceptedTypeCheck(t1[i], "$isRuntimeType");
            if (needsComma)
              result += ", ";
            result += J.toString$0$(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + J.toString$0$(this.returnType));
      },
      static: {RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }}
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    VoidRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "void";
      },
      toRti$0: function() {
        return H.throwExpression("internal error");
      }
    },
    RuntimeTypePlain: {
      "^": "RuntimeType;_jsConstructorName",
      toRti$0: function() {
        var t1, rti;
        t1 = this._jsConstructorName;
        rti = H.jsConstructorNameToRti(t1);
        if (rti == null)
          throw H.wrapException("no type for '" + t1 + "'");
        return rti;
      },
      toString$0: function(_) {
        return this._jsConstructorName;
      }
    },
    RuntimeTypeGeneric: {
      "^": "RuntimeType;_jsConstructorName,$arguments,rti",
      toRti$0: function() {
        var t1, result, t2, _i;
        t1 = this.rti;
        if (t1 != null)
          return t1;
        t1 = this._jsConstructorName;
        result = [H.jsConstructorNameToRti(t1)];
        if (0 >= result.length)
          return H.ioore(result, 0);
        if (result[0] == null)
          throw H.wrapException("no type for '" + t1 + "<...>'");
        for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          C.JSArray_methods.add$1(result, H.interceptedTypeCheck(t1[_i], "$isRuntimeType").toRti$0());
        this.rti = result;
        return result;
      },
      toString$0: function(_) {
        var t1 = this.$arguments;
        return this._jsConstructorName + "<" + (t1 && C.JSArray_methods).join$1(t1, ", ") + ">";
      }
    },
    FunctionTypeInfoDecoderRing: {
      "^": "Object;_typeData,_cachedToString",
      _convert$1: function(type) {
        var result = H.runtimeTypeToString(type, null);
        if (result != null)
          return result;
        if ("func" in type)
          return new H.FunctionTypeInfoDecoderRing(type, null).toString$0(0);
        else
          throw H.wrapException("bad type");
      },
      toString$0: function(_) {
        var t1, t2, t3, s, sep, _i, argument, $name;
        t1 = this._cachedToString;
        if (t1 != null)
          return t1;
        t1 = this._typeData;
        if ("args" in t1)
          for (t2 = t1.args, t3 = t2.length, s = "(", sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._convert$1(argument));
          }
        else {
          s = "(";
          sep = "";
        }
        if ("opt" in t1) {
          s += sep + "[";
          for (t2 = t1.opt, t3 = t2.length, sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._convert$1(argument));
          }
          s += "]";
        }
        if ("named" in t1) {
          s += sep + "{";
          for (t2 = H.extractKeys(t1.named), t3 = t2.length, sep = "", _i = 0; _i < t3; ++_i, sep = ", ") {
            $name = t2[_i];
            s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), this._convert$1(t1.named[$name]));
          }
          s += "}";
        }
        s += ") -> ";
        if (!!t1.void)
          s += "void";
        else
          s = "ret" in t1 ? C.JSString_methods.$add(s, this._convert$1(t1.ret)) : s + "dynamic";
        this._cachedToString = s;
        return s;
      }
    },
    JsLinkedHashMap: {
      "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$keys: function() {
        return H.listSuperNativeTypeCheck(H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), "$isIterable");
      },
      get$values: function(_) {
        return H.listSuperNativeTypeCheck(H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)), "$isIterable");
      },
      containsKey$1: function(key) {
        var nums;
        if ((key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(H.listTypeCheck(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key))), key) >= 0;
      },
      $index: function(_, key) {
        var strings, cell, t1, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
          cell = H.interceptedTypeCheck(this._getTableEntry$2(strings, key), "$isLinkedHashMapCell");
          t1 = cell == null ? null : cell.hashMapCellValue;
          return H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(this, 1));
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
          cell = H.interceptedTypeCheck(this._getTableEntry$2(nums, key), "$isLinkedHashMapCell");
          t1 = cell == null ? null : cell.hashMapCellValue;
          return H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(this, 1));
        } else
          return H.assertSubtypeOfRuntimeType(this.internalGet$1(key), H.getTypeArgumentByIndex(this, 1));
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
        bucket = H.listTypeCheck(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key)));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
        return H.assertSubtypeOfRuntimeType(H.interceptedTypeCheck(bucket[index], "$isLinkedHashMapCell").hashMapCellValue, H.getTypeArgumentByIndex(this, 1));
      },
      $indexSet: function(_, key, value) {
        var strings, nums, rest, hash, bucket, index;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else {
          H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
          H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
          rest = this._rest;
          if (rest == null) {
            rest = this._newHashTable$0();
            this._rest = rest;
          }
          hash = this.internalComputeHashCode$1(key);
          bucket = this._getTableEntry$2(rest, hash);
          if (bucket == null)
            this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
          else {
            index = this.internalFindBucketIndex$2(bucket, key);
            if (index >= 0)
              H.interceptedTypeCheck(bucket[index], "$isLinkedHashMapCell").hashMapCellValue = value;
            else
              bucket.push(this._newLinkedCell$2(key, value));
          }
        }
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return H.assertSubtypeOfRuntimeType(this._removeHashTableEntry$2(this._strings, key), H.getTypeArgumentByIndex(this, 1));
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return H.assertSubtypeOfRuntimeType(this._removeHashTableEntry$2(this._nums, key), H.getTypeArgumentByIndex(this, 1));
        else
          return H.assertSubtypeOfRuntimeType(this.internalRemove$1(key), H.getTypeArgumentByIndex(this, 1));
      },
      internalRemove$1: function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
        bucket = H.listTypeCheck(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key)));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
        cell = H.interceptedTypeCheck(bucket.splice(index, 1)[0], "$isLinkedHashMapCell");
        this._unlinkCell$1(cell);
        return H.assertSubtypeOfRuntimeType(cell.hashMapCellValue, H.getTypeArgumentByIndex(this, 1));
      },
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var t1, cell, modifications;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.K(), this.V()])._assertCheck$1(action);
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          t1.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        cell = H.interceptedTypeCheck(this._getTableEntry$2(table, key), "$isLinkedHashMapCell");
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
        cell = H.interceptedTypeCheck(this._getTableEntry$2(table, key), "$isLinkedHashMapCell");
        if (cell == null)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 1));
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return H.assertSubtypeOfRuntimeType(cell.hashMapCellValue, H.getTypeArgumentByIndex(this, 1));
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), null, null);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next, t1;
        previous = cell._previous;
        next = cell._next;
        if (previous == null) {
          t1 = this._first;
          H.assertHelper(cell == null ? t1 == null : cell === t1);
          this._first = next;
        } else
          previous._next = next;
        if (next == null) {
          t1 = this._last;
          H.assertHelper(cell == null ? t1 == null : cell === t1);
          this._last = previous;
        } else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(H.interceptedTypeCheck(bucket[i], "$isLinkedHashMapCell").hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _getTableEntry$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        H.assertHelper(value != null);
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return H.interceptedTypeCheck(this._getTableEntry$2(table, key), "$isLinkedHashMapCell") != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      K: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      V: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      },
      $isInternalMap: 1,
      $isLinkedHashMap: 1,
      $isMap: 1
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:1;__js_helper$_captured_this_0",
      call$1: function(each) {
        return this.__js_helper$_captured_this_0.$index(0, each);
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,_next,_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;_map",
      get$length: function(_) {
        return this._map.__js_helper$_length;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 0)));
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        t2.__js_helper$_cell = t1._first;
        return H.assertSubtype(t2, "$isIterator", [H.getTypeArgumentByIndex(this, 0)], "$asIterator");
      },
      forEach$1: function(_, f) {
        var t1, t2, cell, modifications;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.E3()])._assertCheck$1(f);
        t2 = this._map;
        cell = t2._first;
        modifications = t2._modifications;
        for (; cell != null;) {
          t1.call$1(cell.hashMapCellKey);
          if (modifications !== t2._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t2));
          cell = cell._next;
        }
      },
      E3: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      E0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,__js_helper$_cell,__js_helper$_current",
      set$__js_helper$_current: function(_current) {
        this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this.__js_helper$_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this.__js_helper$_cell;
          if (t1 == null) {
            this.set$__js_helper$_current(null);
            return false;
          } else {
            this.set$__js_helper$_current(t1.hashMapCellKey);
            this.__js_helper$_cell = this.__js_helper$_cell._next;
            return true;
          }
        }
      },
      $isIterator: 1
    },
    initHooks_closure: {
      "^": "Closure:1;_captured_getTag_0",
      call$1: function(o) {
        return this._captured_getTag_0(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:7;_captured_getUnknownTag_1",
      call$2: function(o, tag) {
        return this._captured_getUnknownTag_1(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:8;_captured_prototypeForTag_2",
      call$1: function(tag) {
        return this._captured_prototypeForTag_2(H.stringTypeCheck(tag));
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    ListIterable: {
      "^": "Iterable;",
      get$iterator: function(_) {
        var t1, t2;
        t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
        H.listSuperNativeTypeCheck(this, "$isIterable");
        t2 = this.get$length(this);
        return H.assertSubtype(H.setRuntimeTypeInfo(new H.ListIterator(H.listSuperNativeTypeCheck(this, "$isIterable"), t2, 0, H.assertSubtypeOfRuntimeType(null, t1)), [t1]), "$isIterator", [H.getRuntimeTypeArgument(this, "ListIterable", 0)], "$asIterator");
      },
      forEach$1: function(_, action) {
        var t1, $length, i;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.E()])._assertCheck$1(action);
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          t1.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      any$1: function(_, test) {
        var t1, $length, i;
        t1 = H.buildFunctionType(H.buildInterfaceType(P.bool), [this.E()])._assertCheck$1(test);
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          if (H.boolConversionCheck(t1.call$1(this.elementAt$1(0, i))))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      toList$1$growable: function(_, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        H.assertSubtype(result, "$isList", [H.getRuntimeTypeArgument(this, "ListIterable", 0)], "$asList");
        for (i = 0; i < this.get$length(this); ++i) {
          t1 = this.elementAt$1(0, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
        }
        return H.assertSubtype(result, "$isList", [H.getRuntimeTypeArgument(this, "ListIterable", 0)], "$asList");
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      E: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      E0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $isEfficientLength: 1
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,_start,_endOrLength",
      get$_endIndex: function() {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 != null) {
          if (typeof t1 !== "number")
            return t1.$gt();
          t2 = t1 > $length;
        } else
          t2 = true;
        if (t2)
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2, t3;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 != null) {
          if (typeof t2 !== "number")
            return t2.$ge();
          t3 = t2 >= $length;
        } else
          t3 = true;
        if (t3)
          return $length - t1;
        if (typeof t2 !== "number")
          return t2.$sub();
        return t2 - t1;
      },
      elementAt$1: function(_, index) {
        var realIndex = this.get$_startIndex() + index;
        if (index < 0 || C.JSInt_methods.$ge(realIndex, this.get$_endIndex()))
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return H.assertSubtypeOfRuntimeType(J.elementAt$1$ax(this._iterable, realIndex), H.getTypeArgumentByIndex(this, 0));
      },
      SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
        var t1, t2;
        H.listSuperNativeTypeCheck(_iterable, "$isIterable");
        t1 = this._start;
        t2 = this._endOrLength;
        if (t2 != null) {
          if (typeof t2 !== "number")
            return t2.$lt();
          if (t1 > t2)
            throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
        }
      },
      E: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      E0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          var t1;
          H.listSuperNativeTypeCheck(_iterable, "$isIterable");
          t1 = H.setRuntimeTypeInfo(new H.SubListIterable(H.listSuperNativeTypeCheck(_iterable, "$isIterable"), _start, _endOrLength), [$E]);
          t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
          return t1;
        }}
    },
    ListIterator: {
      "^": "Object;_iterable,_length,_index,_current",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this._current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this._length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (t3 >= $length) {
          this.set$_current(null);
          return false;
        }
        this.set$_current(t2.elementAt$1(t1, t3));
        ++this._index;
        return true;
      },
      $isIterator: 1
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1, t2, t3, t4, t5;
        t1 = J.get$iterator$ax(this._iterable);
        t2 = this._f;
        t3 = H.getTypeArgumentByIndex(this, 0);
        t4 = H.getTypeArgumentByIndex(this, 1);
        H.assertSubtype(t1, "$isIterator", [t3], "$asIterator");
        t5 = H.buildFunctionType(H.convertRtiToRuntimeType(t4), [H.convertRtiToRuntimeType(t3)]);
        t5._assertCheck$1(t2);
        t2 = new H.MappedIterator(H.assertSubtypeOfRuntimeType(null, t4), H.assertSubtype(t1, "$isIterator", [t3], "$asIterator"), t5._assertCheck$1(t2));
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        return H.assertSubtype(t2, "$isIterator", [H.getTypeArgumentByIndex(this, 1)], "$asIterator");
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      S0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      T3: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      },
      E0: function() {
        return H.convertRtiToRuntimeType(function($S, $T) {
          return $T;
        }.apply(null, this.$builtinTypeInfo));
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          var t1, t2;
          t1 = H.buildFunctionType(H.convertRtiToRuntimeType($T), [H.convertRtiToRuntimeType($S)]);
          t2 = t1._assertCheck$1($function);
          if (!!J.getInterceptor(iterable).$isEfficientLength) {
            t1 = H.buildFunctionType(H.convertRtiToRuntimeType($T), [H.convertRtiToRuntimeType($S)]);
            t1._assertCheck$1(t2);
            return H.assertSubtype(H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(H.listSuperNativeTypeCheck(iterable, "$isIterable"), t1._assertCheck$1(t2)), [$S, $T]), "$isMappedIterable", [$S, $T], "$asMappedIterable");
          }
          H.listSuperNativeTypeCheck(iterable, "$isIterable");
          t1._assertCheck$1(t2);
          return H.assertSubtype(H.setRuntimeTypeInfo(new H.MappedIterable(H.listSuperNativeTypeCheck(iterable, "$isIterable"), t1._assertCheck$1(t2)), [$S, $T]), "$isMappedIterable", [$S, $T], "$asMappedIterable");
        }}
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f",
      S0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      T3: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      },
      E0: function() {
        return H.convertRtiToRuntimeType(function($S, $T) {
          return $T;
        }.apply(null, this.$builtinTypeInfo));
      },
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;_current,_iterator,_f",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
      },
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.set$_current(this._f$1(t1.get$current()));
          return true;
        }
        this.set$_current(null);
        return false;
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this._current, H.getTypeArgumentByIndex(this, 1));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      S: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      T2: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return H.assertSubtypeOfRuntimeType(this._f$1(J.elementAt$1$ax(this._source, index)), H.getTypeArgumentByIndex(this, 1));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      S1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      T4: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      },
      E: function() {
        return H.convertRtiToRuntimeType(function($S, $T) {
          return $T;
        }.apply(null, this.$builtinTypeInfo));
      },
      E0: function() {
        return H.convertRtiToRuntimeType(function($S, $T) {
          return $T;
        }.apply(null, this.$builtinTypeInfo));
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    FixedLengthListMixin: {
      "^": "Object;"
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return H.interceptedTypeCheck(P.async__AsyncRun__scheduleImmediateJsOverride$closure(), "$isFunction");
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1._captured_storedCallback_0 = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return H.interceptedTypeCheck(P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure(), "$isFunction");
      return H.interceptedTypeCheck(P.async__AsyncRun__scheduleImmediateWithTimer$closure(), "$isFunction");
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      var t1 = H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback);
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(t1), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 3],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      var t1 = H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback);
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t1), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 3],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 3],
    _registerErrorHandler: function(errorHandler, zone) {
      var t1, t2, t3;
      t1 = H.getDynamicRuntimeType();
      t2 = H.buildFunctionType(t1, [t1, t1]);
      t3 = t2._isTest$1(errorHandler);
      if (t3) {
        zone.toString;
        t2._assertCheck$1(errorHandler);
        return t2._assertCheck$1(errorHandler);
      } else {
        zone.toString;
        t1 = H.buildFunctionType(t1, [t1]);
        t1._assertCheck$1(errorHandler);
        return t1._assertCheck$1(errorHandler);
      }
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        $.Zone__current = t1.zone;
        t1.callback$0();
      }
    },
    _microtaskLoopEntry: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $.Zone__current = C.C__RootZone;
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null) {
          H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(P.async___microtaskLoopEntry$closure());
          $.$get$_AsyncRun_scheduleImmediateClosure().call$1(P.async___microtaskLoopEntry$closure());
        }
      }
    }, "call$0", "async___microtaskLoopEntry$closure", 0, 0, 2],
    _scheduleAsyncCallback: function(newEntry) {
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop) {
          H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(P.async___microtaskLoopEntry$closure());
          $.$get$_AsyncRun_scheduleImmediateClosure().call$1(P.async___microtaskLoopEntry$closure());
        }
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, t2, currentZone, t3;
      t1 = H.buildFunctionType(H.getVoidRuntimeType());
      t2 = t1._assertCheck$1(callback);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, t2);
        return;
      }
      currentZone.toString;
      if (C.C__RootZone.get$errorZone() === currentZone) {
        t1 = H.buildFunctionType(H.getDynamicRuntimeType());
        t1._assertCheck$1(t2);
        P._rootScheduleMicrotask(null, null, currentZone, t1._assertCheck$1(t2));
        return;
      }
      t3 = $.Zone__current;
      t2 = t3.bindCallback$2$runGuarded(t2, true);
      t1._assertCheck$1(t2);
      P._rootScheduleMicrotask(null, null, t3, t2);
    },
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, t1, exception;
      t1 = H.getDynamicRuntimeType();
      H.buildFunctionType(t1)._assertCheck$1(userCode);
      H.buildFunctionType(t1, [t1])._assertCheck$1(onSuccess);
      H.buildFunctionType(t1, [t1, H.buildInterfaceType(P.StackTrace)])._assertCheck$1(onError);
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        H.interceptedTypeCheck(s, "$isStackTrace");
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          t1 = J.get$error$x(replacement);
          error = t1;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    Timer_Timer: function(duration, callback) {
      var t1, t2, t3;
      t1 = H.buildFunctionType(H.getVoidRuntimeType());
      t2 = t1._assertCheck$1(callback);
      t3 = $.Zone__current;
      if (t3 === C.C__RootZone) {
        t3.toString;
        t1._assertCheck$1(t2);
        return P.Timer__createTimer(duration, t2);
      }
      t2 = t3.bindCallback$2$runGuarded(t2, true);
      t1._assertCheck$1(t2);
      return P.Timer__createTimer(duration, t2);
    },
    Timer__createTimer: function(duration, callback) {
      var t1, milliseconds;
      t1 = H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback);
      milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t1);
    },
    Zone__enter: function(zone) {
      var t1, previous;
      H.assertHelper(zone != null);
      t1 = $.Zone__current;
      H.assertHelper(zone == null ? t1 != null : zone !== t1);
      previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1, t2, entry;
      t1 = {};
      t1._captured_error_0 = error;
      t1 = new P._rootHandleUncaughtError_closure(t1, stackTrace);
      t2 = H.buildFunctionType(H.getVoidRuntimeType());
      t2._assertCheck$1(t1);
      entry = new P._AsyncCallbackEntry(t2._assertCheck$1(t1), C.C__RootZone, null);
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(entry);
        $._lastPriorityCallback = $._lastCallback;
      } else {
        t2 = $._lastPriorityCallback;
        if (t2 == null) {
          entry.next = t1;
          $._lastPriorityCallback = entry;
          $._nextCallback = entry;
        } else {
          entry.next = t2.next;
          t2.next = entry;
          $._lastPriorityCallback = entry;
          if (entry.next == null)
            $._lastCallback = entry;
        }
      }
    },
    _rethrow: function(error, stackTrace) {
      throw H.wrapException(new P.AsyncError(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f) {
      var old, t1;
      H.buildFunctionType(H.getDynamicRuntimeType())._assertCheck$1(f);
      if ($.Zone__current === zone)
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        t1 = H.interceptedTypeCheck(old, "$isZone");
        H.assertHelper(t1 != null);
        $.Zone__current = t1;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg) {
      var old, t1;
      t1 = H.getDynamicRuntimeType();
      H.buildFunctionType(t1, [t1])._assertCheck$1(f);
      if ($.Zone__current === zone)
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        t1 = H.interceptedTypeCheck(old, "$isZone");
        H.assertHelper(t1 != null);
        $.Zone__current = t1;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      t1 = H.getDynamicRuntimeType();
      H.buildFunctionType(t1, [t1, t1])._assertCheck$1(f);
      if ($.Zone__current === zone)
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        t1 = H.interceptedTypeCheck(old, "$isZone");
        H.assertHelper(t1 != null);
        $.Zone__current = t1;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1, t2;
      t1 = H.buildFunctionType(H.getDynamicRuntimeType());
      f = t1._assertCheck$1(f);
      t2 = C.C__RootZone !== zone;
      if (t2) {
        f = t1._assertCheck$1(zone.bindCallback$2$runGuarded(f, !(!t2 || C.C__RootZone.get$errorZone() === zone)));
        zone = C.C__RootZone;
      }
      t1 = H.buildFunctionType(H.getVoidRuntimeType());
      t1._assertCheck$1(f);
      P._scheduleAsyncCallback(new P._AsyncCallbackEntry(t1._assertCheck$1(f), zone, null));
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:1;_box_0",
      call$1: function(_) {
        var t1, f;
        H.leaveJsAsync();
        t1 = this._box_0;
        f = t1._captured_storedCallback_0;
        t1._captured_storedCallback_0 = null;
        f.call$0();
      }
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:9;_box_0,_captured_div_1,_captured_span_2",
      call$1: function(callback) {
        var storedCallback, t1, t2;
        storedCallback = H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(callback);
        t1 = this._box_0;
        H.assertHelper(t1._captured_storedCallback_0 == null);
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        t1._captured_storedCallback_0 = storedCallback;
        t1 = this._captured_div_1;
        t2 = this._captured_span_2;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;_captured_callback_0",
      call$0: function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;_captured_callback_0",
      call$0: function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }
    },
    Future: {
      "^": "Object;"
    },
    _Completer: {
      "^": "Object;",
      $isCompleter: 1
    },
    _SyncCompleter: {
      "^": "_Completer;future"
    },
    _FutureListener: {
      "^": "Object;_nextListener,result,state,callback,errorCallback"
    },
    _Future: {
      "^": "Object;_state<,_zone,_resultOrListeners",
      set$_state: function(_state) {
        this._state = H.intTypeCheck(_state);
      },
      set$_isChained: function(value) {
        H.assertHelper(this._state < 4);
        this._state = 2;
      },
      then$2$onError: function(f, onError) {
        var t1, t2, currentZone, t3, result;
        t1 = H.getDynamicRuntimeType();
        t2 = H.buildFunctionType(t1, [this.T0()]);
        f = t2._assertCheck$1(f);
        currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          t3 = H.buildFunctionType(t1, [t1]);
          t3._assertCheck$1(f);
          f = t2._assertCheck$1(t3._assertCheck$1(f));
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        t2._assertCheck$1(f);
        result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        H.buildFunctionType(t1, [t1])._assertCheck$1(f);
        this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
        return result;
      },
      then$1: function(f) {
        return this.then$2$onError(f, null);
      },
      whenComplete$1: function(action) {
        var t1, t2, result;
        t1 = H.buildFunctionType(H.getDynamicRuntimeType());
        action = t1._assertCheck$1(action);
        t2 = $.Zone__current;
        result = new P._Future(0, t2, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        if (t2 !== C.C__RootZone) {
          t2.toString;
          t1._assertCheck$1(action);
          action = t1._assertCheck$1(t1._assertCheck$1(action));
        }
        t1._assertCheck$1(action);
        this._addListener$1(new P._FutureListener(null, result, 8, action, null));
        return H.assertSubtype(result, "$isFuture", [H.getTypeArgumentByIndex(this, 0)], "$asFuture");
      },
      _setError$2: function(error, stackTrace) {
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        H.assertHelper(this._state < 4);
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
      },
      _addListener$1: function(listener) {
        var t1, t2;
        H.assertHelper(listener._nextListener == null);
        if (this._state >= 4) {
          t1 = this._zone;
          t2 = new P._Future__addListener_closure(this, listener);
          t1.toString;
          H.buildFunctionType(H.getVoidRuntimeType())._assertCheck$1(t2);
          P._rootScheduleMicrotask(null, null, t1, t2);
        } else {
          listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listener;
        }
      },
      _removeListeners$0: function() {
        var current, prev, next;
        H.assertHelper(this._state < 4);
        current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = null;
        for (prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, listeners;
        H.assertHelper(this._state < 4);
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture)
          if (!!t1.$is_Future)
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
          H.assertHelper(this._state < 4);
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners;
        H.assertHelper(this._state < 4);
        H.assertHelper(!J.getInterceptor(value).$isFuture);
        listeners = this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        H.assertHelper(this._state < 4);
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        H.assertHelper(this._state < 4);
        listeners = this._removeListeners$0();
        H.assertHelper(this._state < 4);
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 10, 0],
      T0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $isFuture: 1,
      static: {_Future__chainForeignFuture: function(source, target) {
          var e, s, t1, exception;
          H.assertHelper(target.get$_state() < 4);
          H.assertHelper(!(source instanceof P._Future));
          t1 = target;
          H.assertHelper(t1.get$_state() < 4);
          t1.set$_state(2);
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        }, _Future__chainCoreFuture: function(source, target) {
          var listener;
          H.assertHelper(target._state < 4);
          H.assertHelper(true);
          H.assertHelper(target._state < 4);
          target._state = 2;
          listener = new P._FutureListener(null, target, 0, null, null);
          if (source._state >= 4)
            P._Future__propagateToListeners(source, listener);
          else
            source._addListener$1(listener);
        }, _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, t4, hasError, asyncError, t5, listeners0, sourceValue, zone, previous, oldZone, chainSource, result;
          t1 = {};
          t1._captured_source_4 = source;
          H.interceptedTypeCheck(source, "$is_Future");
          for (t2 = source; true;) {
            t3 = {};
            H.assertHelper(t2._state >= 4);
            t2 = t1._captured_source_4;
            t4 = t2._state;
            hasError = t4 === 8;
            if (listeners == null) {
              if (hasError) {
                H.assertHelper(t4 >= 4 && true);
                asyncError = H.interceptedTypeCheck(t2._resultOrListeners, "$isAsyncError");
                t2 = t1._captured_source_4._zone;
                t3 = asyncError.error;
                t5 = asyncError.stackTrace;
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t5);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(t1._captured_source_4, listeners);
            }
            t3._captured_listenerHasValue_1 = true;
            if (hasError)
              sourceValue = null;
            else {
              t2 = t1._captured_source_4;
              t4 = t2._state;
              H.assertHelper(t4 >= 4 && t4 === 4);
              sourceValue = H.assertSubtypeOfRuntimeType(t2._resultOrListeners, H.getTypeArgumentByIndex(t2, 0));
            }
            t3._captured_listenerValueOrError_2 = sourceValue;
            t3._captured_isPropagationAborted_3 = false;
            t2 = !hasError;
            if (t2) {
              t4 = listeners.state;
              t4 = (t4 & 1) !== 0 || t4 === 8;
            } else
              t4 = true;
            if (t4) {
              t4 = listeners.result;
              zone = t4._zone;
              if (hasError) {
                t5 = t1._captured_source_4._zone;
                t5.toString;
                if (t5 == null ? zone != null : t5 !== zone) {
                  t5 = t5.get$errorZone();
                  zone.toString;
                  t5 = t5 === zone;
                } else
                  t5 = true;
                t5 = !t5;
              } else
                t5 = false;
              if (t5) {
                t2 = t1._captured_source_4;
                t3 = t2._state;
                H.assertHelper(t3 >= 4 && t3 === 8);
                asyncError = H.interceptedTypeCheck(t2._resultOrListeners, "$isAsyncError");
                t2 = t1._captured_source_4._zone;
                t3 = asyncError.error;
                t4 = asyncError.stackTrace;
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
                return;
              }
              t5 = $.Zone__current;
              if (t5 == null ? zone != null : t5 !== zone) {
                H.assertHelper(zone != null);
                t5 = $.Zone__current;
                H.assertHelper(zone == null ? t5 != null : zone !== t5);
                previous = $.Zone__current;
                $.Zone__current = zone;
                oldZone = previous;
              } else
                oldZone = null;
              if (t2) {
                if ((listeners.state & 1) !== 0)
                  t3._captured_listenerHasValue_1 = H.boolTypeCheck(new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0());
              } else
                new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
              if (listeners.state === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
              if (oldZone != null) {
                H.assertHelper(true);
                $.Zone__current = oldZone;
              }
              if (t3._captured_isPropagationAborted_3)
                return;
              if (H.boolConversionCheck(t3._captured_listenerHasValue_1)) {
                t2 = t3._captured_listenerValueOrError_2;
                t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
              } else
                t2 = false;
              if (t2) {
                chainSource = H.interceptedTypeCheck(t3._captured_listenerValueOrError_2, "$isFuture");
                if (chainSource instanceof P._Future)
                  if (chainSource._state >= 4) {
                    H.assertHelper(t4._state < 4);
                    t4._state = 2;
                    t1._captured_source_4 = chainSource;
                    listeners = new P._FutureListener(null, t4, 0, null, null);
                    t2 = chainSource;
                    continue;
                  } else
                    P._Future__chainCoreFuture(chainSource, t4);
                else
                  P._Future__chainForeignFuture(chainSource, t4);
                return;
              }
            }
            result = listeners.result;
            listeners = result._removeListeners$0();
            t2 = H.boolConversionCheck(t3._captured_listenerHasValue_1);
            t4 = result._state;
            t3 = t3._captured_listenerValueOrError_2;
            if (t2) {
              H.assertSubtypeOfRuntimeType(t3, H.getTypeArgumentByIndex(result, 0));
              H.assertHelper(t4 < 4);
              result._state = 4;
              result._resultOrListeners = t3;
            } else {
              H.interceptedTypeCheck(t3, "$isAsyncError");
              H.assertHelper(t4 < 4);
              result._state = 8;
              result._resultOrListeners = t3;
            }
            t1._captured_source_4 = result;
            t2 = result;
          }
        }}
    },
    _Future__addListener_closure: {
      "^": "Closure:0;_captured_this_0,_captured_listener_1",
      call$0: function() {
        P._Future__propagateToListeners(this._captured_this_0, this._captured_listener_1);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:1;_captured_target_0",
      call$1: function(value) {
        var t1 = this._captured_target_0;
        H.assertHelper(t1._state === 2);
        t1._completeWithValue$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:4;_captured_target_1",
      call$2: function(error, stackTrace) {
        var t1 = this._captured_target_1;
        H.assertHelper(t1._state === 2);
        t1._completeError$2(error, stackTrace);
      },
      call$1: function(error) {
        return this.call$2(error, null);
      }
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;_captured_target_2,_captured_e_3,_captured_s_4",
      call$0: function() {
        this._captured_target_2._completeError$2(this._captured_e_3, this._captured_s_4);
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:11;_box_1,_captured_listener_3,_captured_sourceValue_4,_captured_zone_5",
      call$0: function() {
        var e, s, t1, t2, exception;
        try {
          t1 = this._captured_listener_3;
          H.assertHelper((t1.state & 1) !== 0);
          t2 = H.getDynamicRuntimeType();
          this._box_1._captured_listenerValueOrError_2 = this._captured_zone_5.runUnary$2(H.buildFunctionType(t2, [t2])._assertCheck$1(t1.callback), this._captured_sourceValue_4);
          return true;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._box_1._captured_listenerValueOrError_2 = new P.AsyncError(e, H.interceptedTypeCheck(s, "$isStackTrace"));
          return false;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:2;_box_2,_box_1,_captured_listener_6,_captured_zone_7",
      call$0: function() {
        var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, t2, exception, listenerValueOrError, t3, t4;
        t1 = this._box_2._captured_source_4;
        t2 = t1._state;
        H.assertHelper(t2 >= 4 && t2 === 8);
        asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
        matchesTest = true;
        t1 = this._captured_listener_6;
        if (t1.state === 6) {
          H.assertHelper(true);
          t2 = H.buildFunctionType(H.buildInterfaceType(P.bool), [H.getDynamicRuntimeType()]);
          test = t2._assertCheck$1(t2._assertCheck$1(t1.callback));
          try {
            matchesTest = H.boolTypeCheck(this._captured_zone_7.runUnary$2(test, J.get$error$x(asyncError)));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, H.interceptedTypeCheck(s, "$isStackTrace"));
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
        }
        errorCallback = t1.errorCallback;
        if (H.boolConversionCheck(matchesTest) && errorCallback != null) {
          try {
            t1 = errorCallback;
            t2 = H.getDynamicRuntimeType();
            t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
            t3 = this._captured_zone_7;
            t4 = this._box_1;
            if (t2)
              t4._captured_listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            else
              t4._captured_listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e0 = t1;
            s0 = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e0;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, H.interceptedTypeCheck(s0, "$isStackTrace"));
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
          this._box_1._captured_listenerHasValue_1 = true;
        } else {
          t1 = this._box_1;
          t1._captured_listenerValueOrError_2 = asyncError;
          t1._captured_listenerHasValue_1 = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:2;_box_2,_box_1,_captured_hasError_8,_captured_listener_9,_captured_zone_10",
      call$0: function() {
        var t1, e, s, t2, completeResult, exception, result;
        t1 = {};
        t1._captured_completeResult_0 = null;
        try {
          t2 = this._captured_listener_9;
          H.assertHelper(t2.state === 8);
          completeResult = this._captured_zone_10.run$1(H.buildFunctionType(H.getDynamicRuntimeType())._assertCheck$1(t2.callback));
          t1._captured_completeResult_0 = completeResult;
          t2 = completeResult;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this._captured_hasError_8) {
            t1 = this._box_2._captured_source_4;
            t2 = t1._state;
            H.assertHelper(t2 >= 4 && t2 === 8);
            t1 = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError").error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          if (t1) {
            t1 = this._box_2._captured_source_4;
            t2 = t1._state;
            H.assertHelper(t2 >= 4 && t2 === 8);
            t2 = this._box_1;
            t2._captured_listenerValueOrError_2 = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1 = t2;
          } else {
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = new P.AsyncError(e, H.interceptedTypeCheck(s, "$isStackTrace"));
          }
          t1._captured_listenerHasValue_1 = false;
          return;
        }
        if (!!J.getInterceptor(t2).$isFuture) {
          result = this._captured_listener_9.result;
          result.set$_isChained(true);
          this._box_1._captured_isPropagationAborted_3 = true;
          t2.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this._box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:1;_box_2,_captured_result_11",
      call$1: function(ignored) {
        P._Future__propagateToListeners(this._box_2._captured_source_4, new P._FutureListener(null, this._captured_result_11, 0, null, null));
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
      "^": "Closure:4;_box_0,_captured_result_12",
      call$2: function(error, stackTrace) {
        var t1, completeResult;
        t1 = this._box_0;
        if (!(t1._captured_completeResult_0 instanceof P._Future)) {
          completeResult = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._captured_completeResult_0 = completeResult;
          completeResult._setError$2(error, stackTrace);
        }
        P._Future__propagateToListeners(t1._captured_completeResult_0, new P._FutureListener(null, this._captured_result_12, 0, null, null));
      },
      call$1: function(error) {
        return this.call$2(error, null);
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,zone,next",
      callback$0: function() {
        return this.callback.call$0();
      }
    },
    Stream: {
      "^": "Object;",
      forEach$1: function(_, action) {
        var t1, t2, future;
        t1 = {};
        t2 = H.buildFunctionType(H.getVoidRuntimeType(), [this.T1()])._assertCheck$1(action);
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, t2, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = H.assertSubtype(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]), "$is_Future", [P.$int], "$as_Future");
        t1._captured_count_0 = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return H.assertSubtype(future, "$isFuture", [P.$int], "$asFuture");
      },
      T1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      }
    },
    Stream_forEach_closure: {
      "^": "Closure;_box_0,_captured_this_1,_captured_action_2,_captured_future_3",
      call$1: function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this._captured_action_2, H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this._captured_this_1, "Stream", 0))), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._box_0._captured_subscription_0, this._captured_future_3));
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._captured_this_1, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:0;_captured_action_4,_captured_element_5",
      call$0: function() {
        return this._captured_action_4.call$1(this._captured_element_5);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:1;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:0;_captured_future_6",
      call$0: function() {
        this._captured_future_6._complete$1(null);
      }
    },
    Stream_length_closure: {
      "^": "Closure:1;_box_0",
      call$1: function(_) {
        ++this._box_0._captured_count_0;
      }
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,_captured_future_1",
      call$0: function() {
        this._captured_future_1._complete$1(this._box_0._captured_count_0);
      }
    },
    StreamSubscription: {
      "^": "Object;"
    },
    _EventSink: {
      "^": "Object;"
    },
    _DelayedEvent: {
      "^": "Object;"
    },
    _cancelAndError_closure: {
      "^": "Closure:0;_captured_future_0,_captured_error_1,_captured_stackTrace_2",
      call$0: function() {
        return this._captured_future_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:12;_captured_subscription_0,_captured_future_1",
      call$2: function(error, stackTrace) {
        return P._cancelAndError(this._captured_subscription_0, this._captured_future_1, error, stackTrace);
      }
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;",
      $isZone: 1
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,_captured_stackTrace_1",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1._captured_error_0;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1._captured_error_0 = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this._captured_stackTrace_1;
        if (t2 == null)
          throw H.wrapException(t1);
        P._rethrow(t1, t2);
      }
    },
    _RootZone: {
      "^": "_Zone;",
      get$errorZone: function() {
        return this;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        H.buildFunctionType(H.getDynamicRuntimeType())._assertCheck$1(f);
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        t1 = H.getDynamicRuntimeType();
        H.buildFunctionType(t1, [t1])._assertCheck$1(f);
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        var t1, t2;
        t1 = H.buildFunctionType(H.getDynamicRuntimeType());
        t2 = t1._assertCheck$1(f);
        if (runGuarded)
          return t1._assertCheck$1(new P._RootZone_bindCallback_closure(this, t2));
        else
          return t1._assertCheck$1(new P._RootZone_bindCallback_closure0(this, t2));
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        var t1, t2;
        t1 = H.getDynamicRuntimeType();
        t1 = H.buildFunctionType(t1, [t1]);
        t2 = t1._assertCheck$1(f);
        return t1._assertCheck$1(new P._RootZone_bindUnaryCallback_closure(this, t2));
      },
      $index: function(_, key) {
        return;
      },
      run$1: function(f) {
        var t1 = H.buildFunctionType(H.getDynamicRuntimeType())._assertCheck$1(f);
        if ($.Zone__current === C.C__RootZone)
          return t1.call$0();
        return P._rootRun(null, null, this, t1);
      },
      runUnary$2: function(f, arg) {
        var t1 = H.getDynamicRuntimeType();
        t1 = H.buildFunctionType(t1, [t1])._assertCheck$1(f);
        if ($.Zone__current === C.C__RootZone)
          return t1.call$1(arg);
        return P._rootRunUnary(null, null, this, t1, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        var t1 = H.getDynamicRuntimeType();
        t1 = H.buildFunctionType(t1, [t1, t1])._assertCheck$1(f);
        if ($.Zone__current === C.C__RootZone)
          return t1.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, t1, arg1, arg2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:0;_captured_this_0,_captured_f_1",
      call$0: function() {
        return this._captured_this_0.runGuarded$1(this._captured_f_1);
      }
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:0;_async$_captured_this_2,_captured_f_3",
      call$0: function() {
        return this._async$_captured_this_2.run$1(this._captured_f_3);
      }
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:1;_captured_this_0,_captured_f_1",
      call$1: function(arg) {
        return this._captured_this_0.runUnaryGuarded$2(this._captured_f_1, arg);
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    LinkedHashMap__makeEmpty: function() {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        H.assertHelper(C.JSArray_methods.get$last(t1) === iterable);
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2, t3;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t3 = H.listSuperNativeTypeCheck(iterable, "$isIterable");
        t2._contents = P.StringBuffer__writeAll(t2.get$_contents(), t3, ", ");
      } finally {
        H.assertHelper(C.JSArray_methods.get$last(t1) === iterable);
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1._contents = t1.get$_contents() + rightDelimiter;
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          H.assertHelper(count < 100);
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      var t1, t2;
      t1 = H.buildInterfaceType(P.bool);
      t2 = H.convertRtiToRuntimeType($E);
      H.buildFunctionType(t1, [t2, t2])._assertCheck$1(equals);
      H.buildFunctionType(H.buildInterfaceType(P.$int), [t2])._assertCheck$1(hashCode);
      H.buildFunctionType(t1, [H.getDynamicRuntimeType()])._assertCheck$1(isValidKey);
      return H.assertSubtype(H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]), "$isLinkedHashSet", [$E], "$asLinkedHashSet");
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
        t2 = result;
        t2._contents = t2.get$_contents() + "{";
        t1._captured_first_0 = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1._contents = t1.get$_contents() + "}";
      } finally {
        t1 = $.$get$_toStringVisiting();
        H.assertHelper(C.JSArray_methods.get$last(t1) === m);
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = H.interceptedTypeCheck(bucket[i], "$isLinkedHashMapCell").hashMapCellKey;
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      K: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      V: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[1]);
      },
      static: {_LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          var t1 = H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
          return H.assertSubtype(t1, "$is_LinkedIdentityHashMap", [$K, $V], "$as_LinkedIdentityHashMap");
        }}
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
      get$iterator: function(_) {
        var t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]);
        t1._cell = t1._set._collection$_first;
        return H.assertSubtype(t1, "$isIterator", [H.getTypeArgumentByIndex(this, 0)], "$asIterator");
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      contains$1: function(_, object) {
        var nums;
        if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return H.interceptedTypeCheck(nums[object], "$isLinkedHashSetCell") != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(H.listTypeCheck(rest[this._computeHashCode$1(object)]), object) >= 0;
      },
      lookup$1: function(object) {
        var t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        if (t1) {
          t1 = this.contains$1(0, object) ? object : null;
          return H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(this, 0));
        } else
          return H.assertSubtypeOfRuntimeType(this._lookup$1(object), H.getTypeArgumentByIndex(this, 0));
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 0));
        bucket = H.listTypeCheck(rest[this._computeHashCode$1(object)]);
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 0));
        return H.assertSubtypeOfRuntimeType(J.$index$asx(bucket, index).get$_element(), H.getTypeArgumentByIndex(this, 0));
      },
      forEach$1: function(_, action) {
        var t1, cell, modifications;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.E2()])._assertCheck$1(action);
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          t1.call$1(cell._element);
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._collection$_next;
        }
      },
      add$1: function(_, element) {
        var nums;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._LinkedHashSet__newHashTable();
            this._collection$_nums = nums;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket, t1;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null) {
          t1 = [this._collection$_newLinkedCell$1(element)];
          H.assertHelper(t1 != null);
          rest[hash] = t1;
        } else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = H.listTypeCheck(rest[this._computeHashCode$1(object)]);
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(H.interceptedTypeCheck(bucket.splice(index, 1)[0], "$isLinkedHashSetCell"));
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        var t1;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (H.interceptedTypeCheck(table[element], "$isLinkedHashSetCell") != null)
          return false;
        t1 = this._collection$_newLinkedCell$1(element);
        H.assertHelper(true);
        table[element] = t1;
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = H.interceptedTypeCheck(table[element], "$isLinkedHashSetCell");
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P.LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)), null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next, t1;
        previous = cell._collection$_previous;
        next = cell._collection$_next;
        if (previous == null) {
          t1 = this._collection$_first;
          H.assertHelper(cell == null ? t1 == null : cell === t1);
          this._collection$_first = next;
        } else
          previous._collection$_next = next;
        if (next == null) {
          t1 = this._collection$_last;
          H.assertHelper(cell == null ? t1 == null : cell === t1);
          this._collection$_last = previous;
        } else
          next._collection$_previous = previous;
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(H.interceptedTypeCheck(bucket[i], "$isLinkedHashSetCell")._element, element))
            return i;
        return -1;
      },
      E2: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      E1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $isLinkedHashSet: 1,
      $isSet: 1,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {_LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          H.assertHelper(table != null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next,_collection$_previous"
    },
    LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_cell,_collection$_current",
      set$_collection$_current: function(_current) {
        this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this._collection$_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.set$_collection$_current(null);
            return false;
          } else {
            this.set$_collection$_current(t1._element);
            this._cell = this._cell._collection$_next;
            return true;
          }
        }
      },
      $isIterator: 1
    },
    _HashSetBase: {
      "^": "SetBase;",
      E1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      }
    },
    LinkedHashSet: {
      "^": "Object;",
      $isSet: 1,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    ListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        var t1, t2;
        t1 = H.getRuntimeTypeArgument(receiver, "ListMixin", 0);
        H.listSuperNativeTypeCheck(receiver, "$isIterable");
        t2 = this.get$length(receiver);
        return H.assertSubtype(H.setRuntimeTypeInfo(new H.ListIterator(H.listSuperNativeTypeCheck(receiver, "$isIterable"), t2, 0, H.assertSubtypeOfRuntimeType(null, t1)), [t1]), "$isIterator", [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)], "$asIterator");
      },
      elementAt$1: function(receiver, index) {
        return H.assertSubtypeOfRuntimeType(this.$index(receiver, index), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      forEach$1: function(receiver, action) {
        var t1, $length, t2, t3, i;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [H.convertRtiToRuntimeType(receiver.$builtinTypeInfo && receiver.$builtinTypeInfo[0])])._assertCheck$1(action);
        $length = this.get$length(receiver);
        for (t2 = receiver.length, t3 = $length !== t2, i = 0; i < $length; ++i) {
          if (i >= t2)
            return H.ioore(receiver, i);
          t1.call$1(receiver[i]);
          if (t3)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        var t1, t2;
        t1 = H.getDynamicRuntimeType();
        t2 = H.buildFunctionType(t1, [H.convertRtiToRuntimeType(receiver.$builtinTypeInfo && receiver.$builtinTypeInfo[0])])._assertCheck$1(f);
        t1 = H.buildFunctionType(t1, [t1]);
        t1._assertCheck$1(t2);
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, t1._assertCheck$1(t2)), [null, null]);
      },
      fold$2: function(receiver, initialValue, combine) {
        var t1, $length, t2, t3, value, i;
        t1 = H.getDynamicRuntimeType();
        t1 = H.buildFunctionType(t1, [t1, H.convertRtiToRuntimeType(receiver.$builtinTypeInfo && receiver.$builtinTypeInfo[0])])._assertCheck$1(combine);
        $length = this.get$length(receiver);
        for (t2 = receiver.length, t3 = $length !== t2, value = initialValue, i = 0; i < $length; ++i) {
          if (i >= t2)
            return H.ioore(receiver, i);
          value = t1.call$2(value, receiver[i]);
          if (t3)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    Maps_mapToString_closure: {
      "^": "Closure:5;_collection$_box_0,_captured_result_1",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._collection$_box_0;
        if (!t1._captured_first_0)
          this._captured_result_1._contents += ", ";
        t1._captured_first_0 = false;
        t1 = this._captured_result_1;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "Iterable;_table,_head,_tail,_modificationCount",
      set$_table: function(_table) {
        this._table = H.assertSubtype(_table, "$isList", [H.getTypeArgumentByIndex(this, 0)], "$asList");
      },
      get$iterator: function(_) {
        var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, H.assertSubtypeOfRuntimeType(null, H.getTypeArgumentByIndex(this, 0)));
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return H.assertSubtype(t1, "$isIterator", [H.getTypeArgumentByIndex(this, 0)], "$asIterator");
      },
      forEach$1: function(_, action) {
        var t1, modificationCount, i, t2;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.E4()])._assertCheck$1(action);
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          t2 = this._table;
          if (i < 0 || i >= t2.length)
            return H.ioore(t2, i);
          t1.call$1(t2[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      clear$0: function(_) {
        var i, t1, t2, t3, t4;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
            if (i < 0 || i >= t3)
              return H.ioore(t2, i);
            t2[i] = null;
          }
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, t3, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        t3 = t2.length;
        if (t1 >= t3)
          return H.ioore(t2, t1);
        result = H.assertSubtypeOfRuntimeType(t2[t1], H.getTypeArgumentByIndex(this, 0));
        t2[t1] = null;
        this._head = (t1 + 1 & t3 - 1) >>> 0;
        return H.assertSubtypeOfRuntimeType(result, H.getTypeArgumentByIndex(this, 0));
      },
      _add$1: function(element) {
        var t1, t2, t3;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        t1 = this._table;
        t2 = this._tail;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2] = element;
        t3 = (t2 + 1 & t3 - 1) >>> 0;
        this._tail = t3;
        if (this._head === t3)
          this._grow$0();
        ++this._modificationCount;
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._table.length * 2);
        t1.fixed$length = Array;
        newTable = H.assertSubtype(H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]), "$isList", [H.getTypeArgumentByIndex(this, 0)], "$asList");
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this.set$_table(newTable);
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1;
        H.assertHelper(true);
        t1 = new Array(8);
        t1.fixed$length = Array;
        this.set$_table(H.setRuntimeTypeInfo(t1, [$E]));
      },
      E4: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      E0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $isQueue: 1,
      $isEfficientLength: 1,
      $asIterable: null,
      static: {ListQueue$: function(initialCapacity, $E) {
          var t1 = H.setRuntimeTypeInfo(new P.ListQueue(H.assertSubtype(null, "$isList", [$E], "$asList"), 0, 0, 0), [$E]);
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }}
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_position,_collection$_current",
      set$_collection$_current: function(_current) {
        this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this._collection$_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._position;
        if (t2 === this._end) {
          this.set$_collection$_current(null);
          return false;
        }
        t3 = t1._table;
        if (t2 >= t3.length)
          return H.ioore(t3, t2);
        this.set$_collection$_current(t3[t2]);
        this._position = (this._position + 1 & t1._table.length - 1) >>> 0;
        return true;
      },
      $isIterator: 1
    },
    SetMixin: {
      "^": "Object;",
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      forEach$1: function(_, f) {
        var t1, t2;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.E1()])._assertCheck$1(f);
        for (t2 = this.get$iterator(this); t2.moveNext$0();)
          t1.call$1(H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(t2._collection$_current, H.getTypeArgumentByIndex(t2, 0)), H.getTypeArgumentByIndex(this, 0)));
      },
      E1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $isSet: 1,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    SetBase: {
      "^": "SetMixin;",
      E1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.assertSubtype(H.setRuntimeTypeInfo([], [$E]), "$isList", [$E], "$asList");
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return H.assertSubtype(list, "$isList", [$E], "$asList");
    },
    print: function(object) {
      var line = H.S(object);
      H.printString(line);
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;"
    },
    $double: {
      "^": "num;"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration",
      $lt: function(_, other) {
        return C.JSInt_methods.$lt(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = H.stringTypeCheck(t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60)));
        twoDigitSeconds = H.stringTypeCheck(t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60)));
        sixDigitUs = H.stringTypeCheck(new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000)));
        return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:6;",
      call$1: function(n) {
        if (n >= 100000)
          return "" + n;
        if (n >= 10000)
          return "0" + n;
        if (n >= 1000)
          return "00" + n;
        if (n >= 100)
          return "000" + n;
        if (n >= 10)
          return "0000" + n;
        return "00000" + n;
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:6;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    AssertionError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Assertion failed";
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        }, ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }}
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        H.assertHelper(this._hasValue);
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else {
            if (typeof t2 !== "number")
              return t2.$gt();
            if (C.JSInt_methods.$gt(t2, t1))
              explanation = ": Not in range " + H.S(t1) + ".." + t2 + ", inclusive";
            else
              explanation = C.JSInt_methods.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
          }
        }
        return explanation;
      },
      static: {RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (start > end || end > $length)
            throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
          return end;
        }}
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        H.assertHelper(this._hasValue);
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      $isRangeError: 1,
      static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, H.intTypeCheck(t1), true, invalidValue, $name, "Index out of range");
        }}
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      },
      $isException: 1
    },
    Expando: {
      "^": "Object;name",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var values, t1;
        values = H.Primitives_getProperty(object, "expando$values");
        t1 = values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
        return H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(this, 0));
      },
      _getKey$0: function() {
        var key, t1;
        key = H.stringTypeCheck(H.Primitives_getProperty(this, "expando$key"));
        if (key == null) {
          t1 = $.Expando__keyCount;
          $.Expando__keyCount = t1 + 1;
          key = "expando$key$" + t1;
          H.Primitives_setProperty(this, "expando$key", key);
        }
        return key;
      }
    },
    $int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;",
      forEach$1: function(_, f) {
        var t1, t2;
        t1 = H.buildFunctionType(H.getVoidRuntimeType(), [this.E0()])._assertCheck$1(f);
        for (t2 = this.get$iterator(this); t2.moveNext$0();)
          t1.call$1(H.assertSubtypeOfRuntimeType(t2.get$current(), H.getRuntimeTypeArgument(this, "Iterable", 0)));
      },
      get$length: function(_) {
        var it, count;
        H.assertHelper(!this.$isEfficientLength);
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = H.assertSubtypeOfRuntimeType(t1.get$current(), H.getRuntimeTypeArgument(this, "Iterable", 0));
          if (index === elementIndex)
            return H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this, "Iterable", 0));
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      E0: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      $asIterable: null
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;",
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    "+List": 0,
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;"
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;"
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents<",
      get$length: function(_) {
        return this._contents.length;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }}
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    _wrapZone: function(callback) {
      var t1, t2;
      t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1])._assertCheck$1(callback);
      t2 = $.Zone__current;
      if (t2 === C.C__RootZone)
        return t1;
      return t2.bindUnaryCallback$2$runGuarded(t1, true);
    },
    HtmlElement: {
      "^": "Element;",
      $isHtmlElement: 1,
      $isObject: 1,
      "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMenuItemElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|PluginPlaceholderElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAnchorElement"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAreaElement"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLBodyElement"
    },
    CanvasElement: {
      "^": "HtmlElement;",
      $isCanvasElement: 1,
      $isObject: 1,
      "%": "HTMLCanvasElement"
    },
    CanvasRenderingContext2D: {
      "^": "Interceptor;",
      clearRect$4: function(receiver, x, y, width, height) {
        return receiver.clearRect(x, y, width, height);
      },
      fillRect$4: function(receiver, x, y, width, height) {
        return receiver.fillRect(x, y, width, height);
      },
      lineTo$2: function(receiver, x, y) {
        return receiver.lineTo(x, y);
      },
      moveTo$2: function(receiver, x, y) {
        return receiver.moveTo(x, y);
      },
      fillText$4: function(receiver, text, x, y, maxWidth) {
        receiver.fillText(text, x, y);
      },
      fillText$3: function($receiver, text, x, y) {
        return this.fillText$4($receiver, text, x, y, null);
      },
      $isCanvasRenderingContext2D: 1,
      $isObject: 1,
      "%": "CanvasRenderingContext2D"
    },
    Document: {
      "^": "Node;",
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      "%": ";Document"
    },
    DomException: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    Element: {
      "^": "Node;",
      toString$0: function(receiver) {
        return receiver.localName;
      },
      $isElement: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isEventTarget: 1,
      "%": ";Element"
    },
    ErrorEvent: {
      "^": "Event;error=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;",
      $isEvent: 1,
      $isObject: 1,
      "%": "AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|CustomEvent|DeviceLightEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;ClipboardEvent|Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      _addEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(H.buildFunctionType(H.getDynamicRuntimeType(), [H.buildInterfaceType(W.Event)])._assertCheck$1(listener), 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(H.buildFunctionType(H.getDynamicRuntimeType(), [H.buildInterfaceType(W.Event)])._assertCheck$1(listener), 1), false);
      },
      $isEventTarget: 1,
      "%": "MediaStream;EventTarget"
    },
    FormElement: {
      "^": "HtmlElement;length=",
      "%": "HTMLFormElement"
    },
    HtmlDocument: {
      "^": "Document;",
      $isHtmlDocument: 1,
      "%": "HTMLDocument"
    },
    ImageElement: {
      "^": "HtmlElement;",
      $isObject: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;",
      $isElement: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isEventTarget: 1,
      "%": "HTMLInputElement"
    },
    KeyboardEvent: {
      "^": "UIEvent;",
      get$keyCode: function(receiver) {
        return receiver.keyCode;
      },
      $isKeyboardEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "KeyboardEvent"
    },
    MediaElement: {
      "^": "HtmlElement;error=",
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaError: {
      "^": "Interceptor;",
      $isMediaError: 1,
      "%": "MediaError"
    },
    Navigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "Navigator"
    },
    Node: {
      "^": "EventTarget;",
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      "%": ";Node"
    },
    ProgressElement: {
      "^": "HtmlElement;position=",
      "%": "HTMLProgressElement"
    },
    SelectElement: {
      "^": "HtmlElement;length=",
      "%": "HTMLSelectElement"
    },
    SpeechRecognitionError: {
      "^": "Event;error=",
      "%": "SpeechRecognitionError"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|DragEvent|FocusEvent|MSPointerEvent|MouseEvent|PointerEvent|SVGZoomEvent|TextEvent|TouchEvent|WheelEvent;UIEvent"
    },
    VideoElement: {
      "^": "MediaElement;",
      $isObject: 1,
      "%": "HTMLVideoElement"
    },
    Window: {
      "^": "EventTarget;",
      get$animationFrame: function(receiver) {
        var completer, t1;
        completer = H.assertSubtype(H.setRuntimeTypeInfo(new P._SyncCompleter(H.assertSubtype(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.num]), "$is_Future", [P.num], "$as_Future")), [P.num]), "$isCompleter", [P.num], "$asCompleter");
        t1 = new W.Window_animationFrame_closure(completer);
        H.buildFunctionType(H.getVoidRuntimeType(), [H.buildInterfaceType(P.num)])._assertCheck$1(t1);
        this._ensureRequestAnimationFrame$0(receiver);
        this._requestAnimationFrame$1(receiver, W._wrapZone(t1));
        return H.assertSubtype(completer.future, "$isFuture", [P.num], "$asFuture");
      },
      _requestAnimationFrame$1: function(receiver, callback) {
        return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.buildFunctionType(H.getVoidRuntimeType(), [H.buildInterfaceType(P.num)])._assertCheck$1(callback), 1));
      },
      _ensureRequestAnimationFrame$0: function(receiver) {
        if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
          return;
        (function($this) {
          var vendors = ['ms', 'moz', 'webkit', 'o'];
          for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
            $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
            $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
          }
          if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
            return;
          $this.requestAnimationFrame = function(callback) {
            return window.setTimeout(function() {
              callback(Date.now());
            }, 16);
          };
          $this.cancelAnimationFrame = function(id) {
            clearTimeout(id);
          };
        })(receiver);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isEventTarget: 1,
      "%": "DOMWindow|Window"
    },
    Window_animationFrame_closure: {
      "^": "Closure:1;_captured_completer_0",
      call$1: function(time) {
        var t1 = this._captured_completer_0.future;
        if (t1._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t1._complete$1(time);
      }
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLFrameSetElement"
    },
    EventStreamProvider: {
      "^": "Object;_eventType"
    },
    _EventStream: {
      "^": "Stream;_target,_eventType,_useCapture",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2;
        t1 = H.getVoidRuntimeType();
        t2 = H.buildFunctionType(t1, [this.T()])._assertCheck$1(onData);
        H.buildFunctionType(t1)._assertCheck$1(onDone);
        t2 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(t2), false);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        t2._tryResume$0();
        return H.assertSubtype(t2, "$isStreamSubscription", [H.getTypeArgumentByIndex(this, 0)], "$asStreamSubscription");
      },
      T: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      },
      T1: function() {
        return H.convertRtiToRuntimeType(this.$builtinTypeInfo && this.$builtinTypeInfo[0]);
      }
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
      cancel$0: function() {
        if (this._target == null)
          return;
        this._unlisten$0();
        this._target = null;
        this._onData = null;
        return;
      },
      _tryResume$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2 && this._pauseCount <= 0) {
          t3 = this._target;
          t3.toString;
          H.buildFunctionType(H.getDynamicRuntimeType(), [H.buildInterfaceType(W.Event)])._assertCheck$1(t1);
          if (t2)
            J._addEventListener$3$x(t3, this._eventType, t1, false);
        }
      },
      _unlisten$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2) {
          t3 = this._target;
          t3.toString;
          H.buildFunctionType(H.getDynamicRuntimeType(), [H.buildInterfaceType(W.Event)])._assertCheck$1(t1);
          if (t2)
            J._removeEventListener$3$x(t3, this._eventType, t1, false);
        }
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": ""
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAElement"
    },
    AltGlyphElement: {
      "^": "TextPositioningElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAltGlyphElement"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEOffsetElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FETileElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFilterElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGImageElement"
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMaskElement"
    },
    PatternElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGPatternElement"
    },
    ScriptElement0: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGScriptElement"
    },
    SvgElement: {
      "^": "Element;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGStyleElement|SVGTitleElement|SVGVKernElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": ";SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGTextPathElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;",
      "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGViewElement"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGGlyphRefElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGlyphRefElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": ""
  }], ["dart.isolate", "dart:isolate",, P, {
    "^": "",
    Capability: {
      "^": "Object;"
    },
    SendPort: {
      "^": "Object;",
      $isCapability: 1
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JSRandom: {
      "^": "Object;",
      nextDouble$0: function() {
        return Math.random();
      },
      $isRandom: 1
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      return $length;
    },
    NativeByteBuffer: {
      "^": "Interceptor;",
      $isNativeByteBuffer: 1,
      $isObject: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      $isNativeTypedData: 1,
      $isObject: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      $isObject: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      $isNativeFloat32List: 1,
      $isFloat32List: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["", "src/bin/main.dart",, F, {
    "^": "",
    main: [function() {
      C.Window_methods.get$animationFrame(window).then$1(F.main__render$closure());
    }, "call$0", "main__main$closure", 0, 0, 2],
    render: [function(now) {
      var t1, t2, t3, t4;
      H.doubleTypeCheck(now);
      t1 = $.$get$ctx();
      t2 = $.$get$width();
      t3 = $.$get$height();
      (t1 && C.CanvasRenderingContext2D_methods).clearRect$4(t1, 0, 0, t2, t3);
      if ($.gameOver) {
        t1.fillStyle = "rgba(180, 50, 50, 1)";
        t1.font = "5em sans-serif";
        C.CanvasRenderingContext2D_methods.fillText$3(t1, "GAME OVER", 50, 100);
      } else {
        t4 = $.lastNow;
        if (typeof now !== "number")
          return now.$sub();
        if (now - t4 >= 200) {
          $.lastNow = now;
          $.$get$snake().update$0();
        }
        $.$get$currentFoodBlock().draw$0();
        $.$get$snake().draw$0();
        t1.fillStyle = "rgba(50, 180, 65, 1)";
        t1.font = "12pt sans-serif";
        C.CanvasRenderingContext2D_methods.fillText$3(t1, "Score: " + $.score, 10, 25);
        t1.beginPath();
        t1.strokeStyle = "rgba(0, 0, 0, 1)";
        t1.lineWidth = 5;
        C.CanvasRenderingContext2D_methods.moveTo$2(t1, 0.5, 0.5);
        if (typeof t2 !== "number")
          return t2.$add();
        C.CanvasRenderingContext2D_methods.lineTo$2(t1, t2 + 0.5, 0.5);
        C.CanvasRenderingContext2D_methods.moveTo$2(t1, t2 + 0.5, 0.5);
        if (typeof t3 !== "number")
          return t3.$add();
        C.CanvasRenderingContext2D_methods.lineTo$2(t1, t2 + 0.5, t3 + 0.5);
        C.CanvasRenderingContext2D_methods.moveTo$2(t1, t2 + 0.5, t3 + 0.5);
        C.CanvasRenderingContext2D_methods.lineTo$2(t1, 0.5, t3 + 0.5);
        C.CanvasRenderingContext2D_methods.moveTo$2(t1, 0.5, t3 + 0.5);
        C.CanvasRenderingContext2D_methods.lineTo$2(t1, 0.5, 0.5);
        t1.stroke();
      }
      C.Window_methods.get$animationFrame(window).then$1(F.main__render$closure());
    }, "call$1", "main__render$closure", 2, 0, 13],
    Movement: {
      "^": "Object;direction,handled",
      setUp$0: function() {
        var t1, t2, t3;
        t1 = H.assertSubtype(H.assertSubtype(H.setRuntimeTypeInfo(new W._EventStream(window, "keydown", false), [null]), "$isStream", [H.getTypeArgumentByIndex(C.EventStreamProvider_keydown, 0)], "$asStream"), "$isStream", [W.KeyboardEvent], "$asStream");
        t2 = new F.Movement_setUp_closure(this);
        t3 = H.getVoidRuntimeType();
        H.buildFunctionType(t3, [t1.T()])._assertCheck$1(t2);
        H.buildFunctionType(t3)._assertCheck$1(null);
        t2 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), false), [H.getTypeArgumentByIndex(t1, 0)]);
        t2._tryResume$0();
        H.assertSubtype(t2, "$isStreamSubscription", [H.getTypeArgumentByIndex(t1, 0)], "$asStreamSubscription");
      }
    },
    Movement_setUp_closure: {
      "^": "Closure:1;_main$_captured_this_0",
      call$1: function(e) {
        var t1 = this._main$_captured_this_0;
        if (t1.handled)
          switch (J.get$keyCode$x(e)) {
            case 87:
            case 90:
              if (t1.direction !== C.Direction_2)
                t1.direction = C.Direction_0;
              break;
            case 68:
              if (t1.direction !== C.Direction_3)
                t1.direction = C.Direction_1;
              break;
            case 83:
              if (t1.direction !== C.Direction_0)
                t1.direction = C.Direction_2;
              break;
            case 65:
            case 81:
              if (t1.direction !== C.Direction_1)
                t1.direction = C.Direction_3;
              break;
          }
        t1.handled = false;
      }
    },
    Direction: {
      "^": "Object;index",
      toString$0: function(_) {
        return C.Map_iTQSy.$index(0, this.index);
      }
    },
    SnakePathCell: {
      "^": "Object;position>",
      toString$0: function(_) {
        return "SnakePathCell {position: " + this.position.toString$0(0) + "}";
      }
    },
    Block: {
      "^": "Object;position>",
      toString$0: function(_) {
        return "SnakeBlock {position: " + J.toString$0$(this.position) + "}";
      }
    },
    SnakeBlock: {
      "^": "Block;position",
      draw$0: function() {
        var t1, t2;
        t1 = $.$get$ctx();
        t1.fillStyle = "rgba(30, 30, 30, 1)";
        t2 = this.position._v2storage;
        (t1 && C.CanvasRenderingContext2D_methods).fillRect$4(t1, H.doubleTypeCheck(t2[0]), H.doubleTypeCheck(t2[1]), 50, 50);
      },
      static: {SnakeBlock$: function(position) {
          return new F.SnakeBlock(position);
        }}
    },
    FoodBlock: {
      "^": "Block;position",
      draw$0: function() {
        var t1, t2;
        t1 = $.$get$ctx();
        t1.fillStyle = "rgba(23, 150, 240, 1)";
        t2 = this.position._v2storage;
        (t1 && C.CanvasRenderingContext2D_methods).fillRect$4(t1, H.doubleTypeCheck(t2[0]), H.doubleTypeCheck(t2[1]), 50, 50);
      },
      toString$0: function(_) {
        return "SnakeBlock {position: " + J.toString$0$(this.position) + "}";
      },
      static: {FoodBlock_FoodBlock$findSuitablePosition: function(blocks) {
          var t1, t2, t3, t4, t5, t6, t7, t8;
          t1 = {};
          H.assertSubtype(blocks, "$isList", [F.SnakePathCell], "$asList");
          t1._captured_possiblePosition_0 = null;
          do {
            t2 = $.$get$rand();
            t3 = t2.nextDouble$0();
            t4 = $.$get$width();
            t3 = C.JSNumber_methods.$mul(t3, t4);
            t5 = C.JSInt_methods.toInt$0(60);
            t3 = C.JSDouble_methods.round$0(t3 / t5);
            t2 = t2.nextDouble$0();
            t6 = $.$get$height();
            t2 = C.JSNumber_methods.$mul(t2, t6);
            t7 = C.JSInt_methods.toInt$0(60);
            t2 = C.JSDouble_methods.round$0(t2 / t7);
            t8 = new Float32Array(2);
            t8[0] = t3 * t5;
            t8[1] = t2 * t7;
            t1._captured_possiblePosition_0 = new T.Vector2(t8);
          } while (C.JSArray_methods.any$1(blocks, new F.FoodBlock_FoodBlock$findSuitablePosition_closure(t1)) || C.JSNumber_methods.$ge(H.doubleTypeCheck(t1._captured_possiblePosition_0._v2storage[0]), t4) || C.JSNumber_methods.$ge(H.doubleTypeCheck(t1._captured_possiblePosition_0._v2storage[1]), t6));
          return new F.FoodBlock(t1._captured_possiblePosition_0);
        }}
    },
    FoodBlock_FoodBlock$findSuitablePosition_closure: {
      "^": "Closure:1;_main$_box_0",
      call$1: function(block) {
        return J.$eq$(J.get$position$x(block), this._main$_box_0._captured_possiblePosition_0);
      }
    },
    Snake: {
      "^": "Object;_cells,_blocks",
      update$0: function() {
        var t1, t2, newPathCellPosition, t3, t4, i, t5, otherStorage, rootX, rootY;
        t1 = this._cells;
        if (t1.length === 0) {
          t2 = C.JSArray_methods.get$first(this._blocks);
          newPathCellPosition = new T.Vector2(new Float32Array(H._checkLength(2)));
          newPathCellPosition.setFrom$1(t2.position);
        } else {
          t2 = C.JSArray_methods.get$first(t1);
          newPathCellPosition = new T.Vector2(new Float32Array(H._checkLength(2)));
          newPathCellPosition.setFrom$1(t2.position);
        }
        switch ($.$get$movement().direction) {
          case C.Direction_0:
            t2 = new Float32Array(H._checkLength(2));
            t2[0] = 0;
            t2[1] = -60;
            newPathCellPosition.add$1(0, new T.Vector2(t2));
            break;
          case C.Direction_1:
            t2 = new Float32Array(H._checkLength(2));
            t2[0] = 60;
            t2[1] = 0;
            newPathCellPosition.add$1(0, new T.Vector2(t2));
            break;
          case C.Direction_2:
            t2 = new Float32Array(H._checkLength(2));
            t2[0] = 0;
            t2[1] = 60;
            newPathCellPosition.add$1(0, new T.Vector2(t2));
            break;
          case C.Direction_3:
            t2 = new Float32Array(H._checkLength(2));
            t2[0] = -60;
            t2[1] = 0;
            newPathCellPosition.add$1(0, new T.Vector2(t2));
            break;
        }
        t2 = new F.SnakePathCell(newPathCellPosition);
        H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
        C.JSArray_methods.checkGrowable$1(t1, "insert");
        t1.splice(0, 0, t2);
        t2 = this._blocks;
        t3 = t2.length;
        t4 = t1.length;
        if (t3 < t4)
          C.JSArray_methods.removeRange$2(t1, t3 + 1, t4);
        for (t3 = t2.length, t4 = t1.length, i = 0; i < t3; ++i) {
          t5 = t2[i];
          if (i >= t4)
            return H.ioore(t1, i);
          otherStorage = t1[i].position._v2storage;
          t5 = t5.position._v2storage;
          t5[1] = otherStorage[1];
          t5[0] = otherStorage[0];
        }
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0].position._v2storage;
        rootX = H.doubleTypeCheck(t4[0]);
        rootY = H.doubleTypeCheck(t4[1]);
        P.RangeError_checkValidRange(1, t3, t3, null, null, null);
        if (H.listSuperNativeTypeCheck(H.SubListIterable$(t2, 1, t3, H.getTypeArgumentByIndex(t2, 0)), "$isIterable").any$1(0, new F.Snake_update_closure(this)) || rootX < 0 || C.JSNumber_methods.$gt(rootX, $.$get$width()) || rootY < 0 || C.JSNumber_methods.$gt(rootY, $.$get$height()))
          $.gameOver = true;
        if (newPathCellPosition.$eq(0, $.$get$currentFoodBlock().position)) {
          $.score = $.score + 100;
          t3 = t2.length;
          if (t3 >= t1.length)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          t4 = new T.Vector2(new Float32Array(H._checkLength(2)));
          t4.setFrom$1(t3.position);
          H.voidTypeCheck(C.JSArray_methods.add$1(t2, new F.SnakeBlock(t4)));
          $.currentFoodBlock = F.FoodBlock_FoodBlock$findSuitablePosition(t1);
        }
        $.$get$movement().handled = true;
      },
      draw$0: function() {
        return H.voidTypeCheck(C.JSArray_methods.forEach$1(this._blocks, new F.Snake_draw_closure()));
      },
      Snake$1: function(rootBlock) {
        C.JSArray_methods.add$1(this._blocks, rootBlock);
      }
    },
    Snake_update_closure: {
      "^": "Closure:1;_main$_captured_this_0",
      call$1: function(block) {
        return J.$eq$(C.JSArray_methods.get$first(this._main$_captured_this_0._blocks).position, J.get$position$x(block));
      }
    },
    Snake_draw_closure: {
      "^": "Closure:1;",
      call$1: function(e) {
        return e.draw$0();
      }
    }
  }, 1], ["quiver.core", "package:quiver/core.dart",, X, {
    "^": "",
    hashObjects: function(objects) {
      var t1, t2, hash;
      t1 = H.intTypeCheck(C.NativeFloat32List_methods.fold$2(objects, 0, new X.hashObjects_closure()));
      t2 = C.JSInt_methods.$and(67108863, t1);
      if (typeof t1 !== "number")
        return t1.$add();
      hash = 536870911 & t1 + (t2 << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    hashObjects_closure: {
      "^": "Closure:5;",
      call$2: function(h, i) {
        var hash;
        H.intTypeCheck(h);
        if (typeof h !== "number")
          return h.$add();
        hash = 536870911 & h + (i & 0x1FFFFFFF);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        return hash ^ hash >>> 6;
      }
    }
  }], ["vector_math", "package:vector_math/vector_math.dart",, T, {
    "^": "",
    Vector2: {
      "^": "Object;_v2storage",
      setFrom$1: function(other) {
        var otherStorage, t1;
        otherStorage = other._v2storage;
        t1 = this._v2storage;
        t1[1] = otherStorage[1];
        t1[0] = otherStorage[0];
        return this;
      },
      toString$0: function(_) {
        var t1 = this._v2storage;
        return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
      },
      $eq: function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        if (other instanceof T.Vector2) {
          t1 = this._v2storage;
          t2 = t1[0];
          t3 = other._v2storage;
          t1 = t2 === t3[0] && t1[1] === t3[1];
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return X.hashObjects(this._v2storage);
      },
      $index: function(_, i) {
        var t1;
        H.intTypeCheck(i);
        t1 = this._v2storage;
        if (i >= 2)
          return H.ioore(t1, i);
        return H.doubleTypeCheck(t1[i]);
      },
      get$length: function(_) {
        var t1, t2, sum;
        t1 = this._v2storage;
        t2 = t1[0];
        t1 = t1[1];
        sum = H.doubleTypeCheck(t2 * t2 + t1 * t1);
        return H.doubleTypeCheck(Math.sqrt(sum));
      },
      add$1: function(_, arg) {
        var argStorage, t1;
        argStorage = arg._v2storage;
        t1 = this._v2storage;
        t1[0] = t1[0] + argStorage[0];
        t1[1] = t1[1] + argStorage[1];
        return this;
      },
      static: {Vector2$zero: function() {
          return new T.Vector2(new Float32Array(H._checkLength(2)));
        }}
    }
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$keyCode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$keyCode(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$position$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$position(receiver);
  };
  J.$index$asx = function(receiver, a0) {
    if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
      if (a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J._addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
  };
  J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  // Output contains no constant list.
  var $ = Isolate.$isolateProperties;
  C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
  C.HtmlDocument_methods = W.HtmlDocument.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NativeFloat32List_methods = H.NativeFloat32List.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Window_methods = W.Window.prototype;
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_VoidRuntimeType = new H.VoidRuntimeType();
  C.C__JSRandom = new P._JSRandom();
  C.C__RootZone = new P._RootZone();
  C.Direction_0 = new F.Direction(0);
  C.Direction_1 = new F.Direction(1);
  C.Direction_2 = new F.Direction(2);
  C.Direction_3 = new F.Direction(3);
  C.Duration_0 = new P.Duration(0);
  C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.Map_iTQSy = new H.GeneralConstantMap([0, "Direction.up", 1, "Direction.right", 2, "Direction.down", 3, "Direction.left"]);
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.RuntimeFunctionType_inAssert = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Expando__keyCount = 0;
  $.score = 0;
  $.lastNow = 0;
  $.gameOver = false;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var staticName = lazies[i++];
      var lazyValue = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", "DART_CLOSURE_PROPERTY_NAME", function() {
    return init.getIsolateTag("_$dart_dartClosure");
  }, "IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", "thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", "workerIds", function() {
    return H.assertSubtype(H.setRuntimeTypeInfo(new P.Expando(null), [P.$int]), "$isExpando", [P.$int], "$asExpando");
  }, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", "noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
        return "$receiver$";
      }}));
  }, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", "notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
        return "$receiver$";
      }}));
  }, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", "nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", "nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", "undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", "undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", "nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", "nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", "undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", "undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "_AsyncRun_scheduleImmediateClosure", "$get$_AsyncRun_scheduleImmediateClosure", "scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_toStringVisiting", "$get$_toStringVisiting", "_toStringVisiting", function() {
    return [];
  }, "canvas", "$get$canvas", "canvas", function() {
    return H.interceptedTypeCheck(C.HtmlDocument_methods.querySelector$1(document, "#canvas"), "$isCanvasElement");
  }, "ctx", "$get$ctx", "ctx", function() {
    var t1 = $.$get$canvas();
    t1.toString;
    return t1.getContext("2d");
  }, "width", "$get$width", "width", function() {
    var t1, t2;
    t1 = $.$get$canvas();
    t2 = C.JSInt_methods.toInt$0(1430);
    t1.width = t2;
    return t2;
  }, "height", "$get$height", "height", function() {
    var t1, t2;
    t1 = $.$get$canvas();
    t2 = C.JSInt_methods.toInt$0(710);
    t1.height = t2;
    return t2;
  }, "movement", "$get$movement", "movement", function() {
    var t1 = new F.Movement(C.Direction_1, false);
    t1.setUp$0();
    return t1;
  }, "snake", "$get$snake", "snake", function() {
    var t1, t2;
    t1 = T.Vector2$zero();
    t2 = t1._v2storage;
    t2[0] = 60;
    t2[1] = 60;
    t1 = F.SnakeBlock$(t1);
    t2 = new F.Snake(H.assertSubtype([], "$isList", [F.SnakePathCell], "$asList"), H.assertSubtype([], "$isList", [F.SnakeBlock], "$asList"));
    t2.Snake$1(t1);
    return t2;
  }, "currentFoodBlock", "$get$currentFoodBlock", "currentFoodBlock", function() {
    return F.FoodBlock_FoodBlock$findSuitablePosition([]);
  }, "rand", "$get$rand", "rand", function() {
    return C.C__JSRandom;
  }]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [null];
  init.types = [{func: 1}, {func: 1, args: [,]}, {func: 1, v: true}, {func: 1, v: true, args: [{func: 1, v: true}]}, {func: 1, args: [,], opt: [,]}, {func: 1, args: [,,]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, args: [, P.String]}, {func: 1, args: [P.String]}, {func: 1, args: [{func: 1, v: true}]}, {func: 1, v: true, args: [,], opt: [P.StackTrace]}, {func: 1, ret: P.bool}, {func: 1, args: [, P.StackTrace]}, {func: 1, v: true, args: [P.$double]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(F.main__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(F.main__main$closure(), a);
      })([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=main.dart.js.map
